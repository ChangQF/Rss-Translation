<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>标记为机器学习的活跃问题 - Thinbug</title>
    <link>https://stackoverflow.com/questions/tagged/?tagnames=machine-learning&sort=active</link>
    <description>来自 stackoverflow.com 的最新 30 个</description>
    <lastBuildDate>Sat, 13 Jan 2024 18:16:43 GMT</lastBuildDate>
    <item>
      <title>数据加载减慢模型训练</title>
      <link>https://stackoverflow.com/questions/77812244/data-loading-slowing-down-model-training</link>
      <description><![CDATA[当我开始训练模型时，我注意到第一个时期非常慢，但接下来的时期很快。当使用通常的数据加载方法时，它不需要第一个纪元，所以我怀疑错误出在我的加载器中。我需要这样，因为我在批次中使用示例挖掘，所以我需要它们来自同一类，以免混淆。因此，最后一批通常不是完整的批次大小。
请看看我的加载器：
def load_image(文件名, target_shape=(300,300,3)):
    image_string = tf.io.read_file(文件名)
    图像 = tf.image.decode_jpeg(image_string, 通道=3)
    图像 = tf.keras.applications.efficientnet_v2.preprocess_input(图像)

    # 调整图像大小，使其较大尺寸与目标尺寸匹配
    形状 = tf.shape(图像)
    比率 = tf.cast(target_shape[0], tf.float32) / tf.cast(tf.maximum(shape[0], shape[1]), tf.float32)
    new_shape = tf.cast(tf.cast(shape[:2], tf.float32) * 比率, tf.int32)
    图像 = tf.image.resize(图像, new_shape)

    # 将图像填充到目标形状
    pad_height = target_shape[0] - new_shape[0]
    pad_width = target_shape[1] - new_shape[1]
    pad_top = pad_height // 2
    pad_bottom = pad_height - pad_top
    pad_left = pad_width // 2
    pad_right = pad_width - pad_left
    图像 = tf.pad(图像, [[pad_top, pad_bottom], [pad_left, pad_right], [0, 0]], Constant_values=0)

    返回图像

def preprocess_triplets(锚点、正值、负值):
    返回 （
        加载图像（锚点），
        加载图像（正），
        加载图像（负），
    ）

我需要一个数据集，其中每个批次都属于同一类别。这是我能想到的唯一解决方案。]]></description>
      <guid>https://stackoverflow.com/questions/77812244/data-loading-slowing-down-model-training</guid>
      <pubDate>Sat, 13 Jan 2024 16:40:08 GMT</pubDate>
    </item>
    <item>
      <title>Q8 蛋白质二级结构预测中使用的准确性评估度量数学形式[关闭]</title>
      <link>https://stackoverflow.com/questions/77812004/q8-accuracy-evaluation-metric-mathematical-form-used-in-protein-secondary-struct</link>
      <description><![CDATA[我正在研究使用递归神经网络 (GRU) 模型的蛋白质二级结构预测。我遇到了几个已经解决类​​似问题的开源项目。
他们都使用 Q8 准确度作为评估指标，下面给出了他们用于计算 Q8 准确度的自定义代码。
def 准确率(y_true, y_pred):
y = tf.argmax(y_true, 轴 =- 1)
y_ = tf.argmax(y_pred, 轴 =- 1)
掩码 = tf.greater(y, 0)
返回 K.cast(K.equal(tf.boolean_mask(y, mask), tf.boolean_mask(y_, mask)), K.floatx())

我想知道上面代码片段对应的Q8精度的数学表达式。
以上代码源码工程参考
https://github.com/idrori/cu-ssp]]></description>
      <guid>https://stackoverflow.com/questions/77812004/q8-accuracy-evaluation-metric-mathematical-form-used-in-protein-secondary-struct</guid>
      <pubDate>Sat, 13 Jan 2024 15:33:55 GMT</pubDate>
    </item>
    <item>
      <title>神经网络预测具有相同的值，没有变化[关闭]</title>
      <link>https://stackoverflow.com/questions/77811384/neural-network-predictions-have-the-same-values-no-variation</link>
      <description><![CDATA[这是我的代码：
# 拟合神经网络
ANN_1 &lt;- 神经网络(as.factor(redeemer_latest_ind) ~ 总购买金额 + 购买频率 +
                     centre_purchase_indicator + customer_tenure +
                     int_pf_ct，
                   数据=训练集，
                   隐藏=c(4,2)，stepmax=1e+06，act.fct =“逻辑”，
                   线性.输出 = FALSE,
                   ）

情节（ANN_1）

# 获取模型预测
temp_test &lt;- 子集(test_set, select = c(“total_purchase_amount”, “purchase_Frequency”, “recent_purchase_indicator”, “customer_tenure”, “int_pf_ct”))
头（临时测试）
nn.结果 &lt;- 预测(ANN_1, temp_test)
nn.results &lt;- nn.results$net.result

当我查看 nn 结果时，我只看到所有预测的值相同。
&lt;前&gt;&lt;代码&gt; [874] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [883] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [892] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [901] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [910] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [919] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [928] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [937] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [946] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [955] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [964] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [973] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [982] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
 [991] 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995 0.3115995
[1000] 0.3115995

如何解决这个问题？我还想添加交叉验证，就像我测试的其他模型一样，这在我的代码中称为 cv_5。但最重要的是获得预测的一些变化，因为我需要它们来测试命中率、最高十分位数提升和基尼系数。
以下是我的火车数据库中的一些见解：
在此处输入图像描述
我已经尝试了不同的最大步长和不同的隐藏层。]]></description>
      <guid>https://stackoverflow.com/questions/77811384/neural-network-predictions-have-the-same-values-no-variation</guid>
      <pubDate>Sat, 13 Jan 2024 12:15:40 GMT</pubDate>
    </item>
    <item>
      <title>逻辑回归值与预期相差不大</title>
      <link>https://stackoverflow.com/questions/77811361/logistic-regression-values-dont-differ-that-much-as-expected</link>
      <description><![CDATA[我想使用 5 折交叉验证方法在数据集中执行逻辑回归（预处理后）。然后计算并打印指标 Accuracy、F1-Score、Gmean 和 Fit time。
然后使用 MinMax Normalization 重复实验，并再次使用特征标准化。
我写的这段代码正确吗？
我只是没有看到标准化方法之间的分数有那么不同，而且我不知道它们是否有效。
将 numpy 导入为 np
将 pandas 导入为 pd
从sklearn.model_selection导入train_test_split，cross_validate，KFold
从sklearn导入线性模型
从 sklearn.linear_model 导入 LogisticRegression
从 sklearn.metrics 导入 precision_score,f1_score,make_scorer
从 imblearn.metrics 导入几何平均分数

data_url =“jm1.csv”；
df = pd.read_csv(data_url, sep=&quot;,&quot;)
df.replace(&#39;?&#39;, pd.NA, inplace=True)
df.dropna(就地=True)
df[&#39;缺陷&#39;] = df[&#39;缺陷&#39;].astype(int)
X=df.drop(&#39;缺陷&#39;, axis=1)
y=df[&#39;缺陷&#39;]

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=13,stratify=y)
模型 = Linear_model.LogisticRegression(solver=&#39;liblinear&#39;,max_iter=500)
model.fit(X_train, y_train)
y_pr=模型.预测(X_test)

kfold=KFold(n_splits=5,shuffle=True,random_state=13)
Scorers={&#39;accuracy_score&#39;: make_scorer(accuracy_score),&#39;F1_score&#39;: make_scorer(f1_score,average=&#39;weighted&#39;),&#39;G-Mean&#39;: make_scorer(geometric_mean_score)}
cv_results=cross_validate(模型,X_train,y_train,cv=kfold,scoring=scorers,return_train_score=True)
print(&quot;准确率：&quot;,cv_results[&#39;test_accuracy_score&#39;].mean())
print(&quot;F1 分数：&quot;, cv_results[&#39;test_F1_score&#39;].mean())
print(&quot;G-Mean 分数：&quot;, cv_results[&#39;test_G-Mean&#39;].mean())
print(&quot;拟合时间：&quot;, cv_results[&#39;fit_time&#39;].mean())

从 sklearn.preprocessing 导入 MinMaxScaler
从 sklearn.pipeline 导入管道
管道 = 管道([(&#39;scaler&#39;, MinMaxScaler()), (&#39;逻辑&#39;, LogisticRegression(solver=&#39;liblinear&#39;))])
cv_results_minmax= cross_validate(管道, X, y, cv=kfold, 评分=得分者, return_train_score=True)
print(&quot;准确率：&quot;,cv_results_minmax[&#39;test_accuracy_score&#39;].mean())
print(&quot;F1 分数：&quot;, cv_results_minmax[&#39;test_F1_score&#39;].mean())
print(&quot;G-Mean 分数：&quot;, cv_results_minmax[&#39;test_G-Mean&#39;].mean())
print(&quot;拟合时间：&quot;, cv_results_minmax[&#39;fit_time&#39;].mean())

从 sklearn.preprocessing 导入 StandardScaler
管道 = Pipeline([(&#39;scaler&#39;, StandardScaler()), (&#39;logistic&#39;, LogisticRegression(solver=&#39;liblinear&#39;))])
cv_results_stand = cross_validate（管道，X，y，cv = kfold，评分=得分者，return_train_score = True）
print(&quot;准确率：&quot;,cv_results_stand[&#39;test_accuracy_score&#39;].mean())
print(&quot;F1 分数：&quot;, cv_results_stand[&#39;test_F1_score&#39;].mean())
print(&quot;G-Mean 分数：&quot;, cv_results_stand[&#39;test_G-Mean&#39;].mean())
print(&quot;适合时间：&quot;, cv_results_stand[&#39;fit_time&#39;].mean())
]]></description>
      <guid>https://stackoverflow.com/questions/77811361/logistic-regression-values-dont-differ-that-much-as-expected</guid>
      <pubDate>Sat, 13 Jan 2024 12:05:34 GMT</pubDate>
    </item>
    <item>
      <title>神经网络的权重初始化，用于调整我的神经网络，以便进行适当的反向传播[关闭]</title>
      <link>https://stackoverflow.com/questions/77811329/weights-initialization-for-neural-network-for-tunning-my-neural-networks-in-orde</link>
      <description><![CDATA[神经网络中的权重初始化方法是什么？
我想知道如何初始化神经网络中的权重，它们是通过手动还是其他方法完成的，权重对于调整神经网络非常有效，为了进行反向传播它将非常有帮助]]></description>
      <guid>https://stackoverflow.com/questions/77811329/weights-initialization-for-neural-network-for-tunning-my-neural-networks-in-orde</guid>
      <pubDate>Sat, 13 Jan 2024 11:56:45 GMT</pubDate>
    </item>
    <item>
      <title>CNN 模型未经训练 [关闭]</title>
      <link>https://stackoverflow.com/questions/77810698/the-cnn-model-is-not-trained</link>
      <description><![CDATA[我正在尝试在 Matlab 中训练 CNN 模型来预测样本大小等于 10 的随机向量的平均值。但是，模型的 RMSE 变得太高。
有什么建议吗？
clear;clc;关闭全部

随机数(1)
mkdir(&#39;数字&#39;)

Num_Sample=500；
N=10；
X=1:N；
百分比_训练=70；
Percent_Val=15；
Percent_Test=100-(Percent_Train+Percent_Val);

Num_Train=floor(Percent_Train/100*Num_Sample);
Num_Val=下限(Percent_Val/100*Num_Sample);
Num_Test=Num_Sample-(Num_Train+Num_Val);

Rand_Ind=randperm(Num_Sample);
Rand_Ind_Train=Rand_Ind(1,1:Num_Train);
Rand_Ind_Val=Rand_Ind(1,1+Num_Train:Num_Train+Num_Val);
Rand_Ind_Test=Rand_Ind(1,1+Num_Train+Num_Val:end);

X0_Train=[];
X0_Val=[];
X0_测试=[];

对于 i=1：Num_Sample
    Y0{i}=2*rand(1,N);
    Mean_Y(1,i)=平均值(Y0{i});

    Fig_i=图(i);
    绘图(X,Y0{i},&#39;o&#39;,&#39;线宽&#39;,2);
    xlim([1,N])
    ylim([0,2])
    清除 Y0{i}

    saveas(Fig_i,[&#39;图/Fig_&#39; num2str(i) &#39;.jpg&#39;]);
    Fig_JPG=imread([&#39;图/Fig_&#39; num2str(i) &#39;.jpg&#39;]);
    %Fig_JPG_RS=imresize(Fig_JPG,0.5);
    Fig_JPG_Gray=rgb2gray(Fig_JPG);
    Fig_JPG_Gray_Double{i}=im2double(Fig_JPG_Gray);
    关闭所有
    我
结尾
[R_Fig_JPG_Gray C_Fig_JPG_Gray]=大小(Fig_JPG_Gray);

X_Train_0=[];
对于 i=1:长度(Rand_Ind_Train)
    X_Train_0=[X_Train_0 Fig_JPG_Gray_Double{Rand_Ind_Train(1,i)}];
    清除 Fig_JPG_Gray_Double{Rand_Ind_Train(1,i)}
结尾
X_Train=reshape(X_Train_0,R_Fig_JPG_Gray,C_Fig_JPG_Gray,1,长度(Rand_Ind_Train));

X_Val_0=[];
对于 i=1:长度(Rand_Ind_Val)
    X_Val_0=[X_Val_0 Fig_JPG_Gray_Double{Rand_Ind_Val(1,i)}];
    清除 Fig_JPG_Gray_Double{Rand_Ind_Val(1,i)}
结尾
X_Val=重塑(X_Val_0,R_Fig_JPG_Gray,C_Fig_JPG_Gray,1,长度(Rand_Ind_Val));

X_Test_0=[];
对于 i=1:长度(Rand_Ind_Test)
    X_Test_0=[X_Test_0 Fig_JPG_Gray_Double{Rand_Ind_Test(1,i)}];
    清除 Fig_JPG_Gray_Double{Rand_Ind_Test(1,i)}
结尾
X_Test=reshape(X_Test_0,R_Fig_JPG_Gray,C_Fig_JPG_Gray,1,长度(Rand_Ind_Test));
 
Y_Train=[Mean_Y(1,Rand_Ind_Train)]&#39;;
Y_Val=[Mean_Y(1,Rand_Ind_Val)]&#39;;
Y_Test=[Mean_Y(1,Rand_Ind_Test)]&#39;;

图1）
直方图(Mean_Y,N)
轴紧
ylabel(&#39;计数&#39;)
xlabel(&#39;Mean_Y&#39;)

%创建网络层
层数=[
    imageInputLayer([R_Fig_JPG_Gray C_Fig_JPG_Gray 1])
    卷积2dLayer(5,12,&#39;填充&#39;,&#39;相同&#39;)
    批量归一化层
    重新定义层
    maxPooling2dLayer(2,&#39;跨步&#39;,2)
    卷积2dLayer(3,16,&#39;填充&#39;,&#39;相同&#39;)
    批量归一化层
    重新定义层
    %averagePooling2dLayer(2,&#39;跨步&#39;,2)
    %卷积2dLayer(3,32,&#39;填充&#39;,&#39;相同&#39;)
    %batch归一化层
    %relu层
    %卷积2dLayer(3,32,&#39;填充&#39;,&#39;相同&#39;)
    %batch归一化层
    %relu层
    dropout层(0.2)
    全连接层(1)
    回归层]；

% 训练网络
miniBatchSize=60；
验证频率=3； %floor(numel(Y_Train)/miniBatchSize);
选项=trainingOptions(&#39;sgdm&#39;, ...
    &#39;MiniBatchSize&#39;,miniBatchSize, ...
    &#39;最大纪元&#39;,6, ...
    &#39;初始学习率&#39;,1e-3, ...
    &#39;LearnRateSchedule&#39;,&#39;分段&#39;, ...
    &#39;学习率下降因子&#39;,0.1, ...
    &#39;学习率下降周期&#39;,2, ...
    “随机播放”、“每个时代”、...
    &#39;验证数据&#39;,{X_Val,Y_Val}, ...
    &#39;验证频率&#39;，验证频率，...
    &#39;情节&#39;，&#39;训练进度&#39;，...
    &#39;详细&#39;，假）；

% 创建网络
Net=trainNetwork(X_Train,Y_Train,层数,选项);

% 测试网络
Y_Sim_Test=预测(Net,X_Test);

我尝试创建一个 CNN 模型来预测随机向量的平均值。]]></description>
      <guid>https://stackoverflow.com/questions/77810698/the-cnn-model-is-not-trained</guid>
      <pubDate>Sat, 13 Jan 2024 07:54:32 GMT</pubDate>
    </item>
    <item>
      <title>如何使用 XGBoost 改进建模？ [关闭]</title>
      <link>https://stackoverflow.com/questions/77809914/how-to-improve-modeling-with-xgboost</link>
      <description><![CDATA[我正在尝试使用 XGBoost 建模时间序列，但我觉得我的数据集非常不连续（如下图）。该数据集记录了 2018 年至 2023 年测量的可可价格价值。
数据集可以在我的 GitHub 存储库中找到：
https://raw.githubusercontent。 com/nunesisabella/Analise-Preditiv-Cacau/main/Cacau%20NY%20Futuros_2018-2023.csv
建模如下：
model_XGB = xgb.XGBRegressor(n_estimators=1000，early_stopping_rounds = 50)

model_XGB.fit(X_train, y_train,
          eval_set=[(X_train, y_train), (X_test, y_test)],
          详细=20)

是否可以通过改进超参数或类似的方法来使测试集获得更好的结果？或者我的数据集确实缺乏季节性，即使是好的建模方法也很难处理它？&lt;​​/p&gt;
]]></description>
      <guid>https://stackoverflow.com/questions/77809914/how-to-improve-modeling-with-xgboost</guid>
      <pubDate>Sat, 13 Jan 2024 00:36:40 GMT</pubDate>
    </item>
    <item>
      <title>用于比较两个向量进行回归的损失函数[关闭]</title>
      <link>https://stackoverflow.com/questions/77809542/loss-function-for-comparing-two-vectors-for-regression</link>
      <description><![CDATA[我想创建一个损失函数来训练我的模型进行回归，其中预测的 Y&#39; 应等于标签 Y。其中 Y 和 Y&#39; 是 (1,16) 二进制胜利者（1 或 0 ）的向量。 
我应该使用binary_cross_entropy还是MSE？
PS：输入和输出之间没有关系，我想通过使用模型从 X 预测 Y 来在它们之间建立关系。
示例：
&lt;前&gt;&lt;代码&gt;X=[0,1,0,1,1,0,1,1,0,1,1,0,1,0,1,0,0,0,0,1,1 ,0,0,0,1,1,0,1,0,1,0,0]
Y = [1,1,1,0,0,0,1,1,1,1,1,0,1,0,0,1]

错误预测= [1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,0]（在 2 中抖动）位）。
所以我想从 X 预测 Y ...什么是最好的成本函数？]]></description>
      <guid>https://stackoverflow.com/questions/77809542/loss-function-for-comparing-two-vectors-for-regression</guid>
      <pubDate>Fri, 12 Jan 2024 22:18:52 GMT</pubDate>
    </item>
    <item>
      <title>两步 ML 预测模型（二元然后连续）：第二步是否应该仅针对正因变量进行训练？ [关闭]</title>
      <link>https://stackoverflow.com/questions/77809477/two-step-ml-prediction-model-binary-then-continuous-should-second-step-be-tra</link>
      <description><![CDATA[我正在创建一个两步 ML 预测模型来预测库存产品的销售情况。我的训练集中有很多销售额要么为 0，要么为负。第一步是一个二元模型，用于预测产品是否应该库存，即预期销量为正 (1) 或不库存，即（销量为负或 0）(0)。
第二步是使用连续模型来预测预计将从库存中受益的商品的销售情况。在这种情况下，我应该在第二步中在整个训练集上训练我的模型，还是只训练训练集中 sales&gt;0 的那些行？
我做了后者，但不确定我是否应该在第二步中使用完整的数据集。]]></description>
      <guid>https://stackoverflow.com/questions/77809477/two-step-ml-prediction-model-binary-then-continuous-should-second-step-be-tra</guid>
      <pubDate>Fri, 12 Jan 2024 21:59:58 GMT</pubDate>
    </item>
    <item>
      <title>citeseer和cora（图链接预测），代码准确性问题[关闭]</title>
      <link>https://stackoverflow.com/questions/77808697/citeseer-and-cora-graph-link-prediciton-problem-whith-code-accuracy</link>
      <description><![CDATA[大家好，我有一个正在训练 citeseer 数据集的代码，该数据集的准确率约为 62%，我需要将其至少提高到 75%，或者使用其中的另一个数据集，该数据集的准确率超过 80%，我使用的 cora 的准确率为 82%准确性，但我需要另一个数据集，或者正如我所说，使 citeseer 75
导入networkx为nx
将 numpy 导入为 np
从 sklearn.model_selection 导入 train_test_split，GridSearchCV
从 sklearn.metrics 导入 precision_score
从 sklearn.preprocessing 导入 StandardScaler
从 sklearn.svm 导入 SVC
从 Node2Vec 导入 Node2Vec
将 pandas 导入为 pd
导入操作系统

# 选择数据集 [ Comic, citeseer, cora ]
数据集=“漫画”

os.system(“cls”)
print(&quot;正在加载数据集...&quot;)
# 加载节点和边数据集
如果数据集==“漫画”：
    G = nx.有向图()
    对于索引，pd.read_csv(&#39;comic_nodes.csv&#39;).iterrows():G.add_node(row[&#39;node&#39;], type=row[&#39;type&#39;]) 中的行
    对于索引，行 in pd.read_csv(&#39;comic_edges.csv&#39;).iterrows():G.add_edge(row[&#39;hero&#39;], row[&#39;comic&#39;])
    node_features = np.array([G.nodes[node].get(&#39;type&#39;, &#39;unknown&#39;) for Node in G.nodes()])
    node_labels = np.array([G.nodes[node].get(&#39;type&#39;, &#39;unknown&#39;) for Node in G.nodes()])
    node_index = {node_id: i for i, node_id in enumerate(G.nodes())}
别的：
    G = nx.read_edgelist(f&quot;{dataset}.cites&quot;, create_using=nx.DiGraph())
    node_data = np.loadtxt(f&quot;{dataset}.content&quot;, dtype=str)
    node_data = [node_data 中数据的数据，如果 G.nodes() 中的数据[0]]
    node_ids, node_features, node_labels = zip(*[(data[0], data[1:-1].astype(int), data[-1]) 对于node_data中的数据])
    node_index = {node_id: i for i, node_id in enumerate(node_ids)}
节点= [node_id为node_id，_排序（node_index.items（），key = lambda item：item [1]）]

os.system(“cls”)
# 使用node2vec生成游走
node2vec = Node2Vec(G，维度=256，walk_length=70，num_walks=200，工人=4)
模型 = node2vec.fit(窗口=20, min_count=0, sg=1, epochs=20)
embeddings = np.array([model.wv[node] 用于节点中的节点])

# 将数据分成训练集和测试集（20%用于测试）
X_train，X_test，y_train，y_test = train_test_split（嵌入，node_labels，test_size = 0.01，random_state = 42）
缩放 = StandardScaler()
X_train = Scale.fit_transform(X_train)
X_test = Scale.transform(X_test)

best_params = {&#39;C&#39;:8}
##### 网格搜索
# grid_search = GridSearchCV(SVC(kernel=&#39;rbf&#39;, gamma=&#39;scale&#39;, random_state=42), {&#39;C&#39;: range(1, 11)}, cv=4)
# grid_search.fit(X_train, y_train)
# best_params = grid_search.best_params_
##### print(&quot;最佳超参数：&quot;, best_params)

# 使用最佳超参数训练 SVM
eclf = SVC(内核=&#39;rbf&#39;, C=best_params[&#39;C&#39;], gamma=&#39;scale&#39;, random_state=42)
eclf = eclf.fit(X_train, y_train)

os.system(“cls”)
print(“准确度：”, precision_score(y_test, eclf.predict(X_test)))
]]></description>
      <guid>https://stackoverflow.com/questions/77808697/citeseer-and-cora-graph-link-prediciton-problem-whith-code-accuracy</guid>
      <pubDate>Fri, 12 Jan 2024 18:44:56 GMT</pubDate>
    </item>
    <item>
      <title>如何使用 Roberta 计算单词和句子嵌入？</title>
      <link>https://stackoverflow.com/questions/77805776/how-to-calculate-word-and-sentence-embedding-using-roberta</link>
      <description><![CDATA[我正在尝试使用 Roberta 计算单词和句子嵌入，对于单词嵌入，我从 RobertaModel 类中提取最后一个隐藏状态 outputs[0]，但是我不确定这是否是正确的计算方法。
至于句子嵌入，我不知道如何计算它们，这是我尝试过的代码：
从 Transformers 导入 RobertaModel、RobertaTokenizer
进口火炬

模型 = RobertaModel.from_pretrained(&#39;roberta-base&#39;)
tokenizer = RobertaTokenizer.from_pretrained(&#39;roberta-base&#39;)
Captions = [“示例标题”、“lorem ipsum”、“这只鸟是黄色的，有红色翅膀”、“嗨”、“示例”]

encoded_captions = [tokenizer.encode(caption) 用于字幕中的字幕]

# 用 0 将序列填充到相同的长度
max_len = max(len(seq) 用于编码字幕中的 seq)
padded_captions = [seq + [0] * (max_len - len(seq)) 对于encoded_captions中的seq]

# 转换为批量大小为 5 的 PyTorch 张量
input_ids = torch.tensor(padded_captions)

输出=模型(input_ids)
word_embedding = 输出[0].连续()
句子嵌入 = ??????

如何使用 Roberta 计算单词和句子嵌入？]]></description>
      <guid>https://stackoverflow.com/questions/77805776/how-to-calculate-word-and-sentence-embedding-using-roberta</guid>
      <pubDate>Fri, 12 Jan 2024 10:05:01 GMT</pubDate>
    </item>
    <item>
      <title>将 XGBoost Shapely 值转换为“SHAP”的解释器对象</title>
      <link>https://stackoverflow.com/questions/77800583/converting-xgboost-shapely-values-to-shaps-explainer-object</link>
      <description><![CDATA[我正在尝试将 XGBoost 形状值转换为 SHAP 解释器对象。将[此处][1]的示例与内置 SHAP 库一起使用需要几天的时间（即使在二次采样数据集上），而 XGBoost 库则需要几分钟。然而。我想输出一个与[此处][2]示例中显示的类似的蜂群图。
我的想法是，我可以使用 XGBoost 库来恢复形状值，然后使用 SHAP 库绘制它们，但蜂群图需要一个解释器对象。如何将我的 XGBoost 助推器对象转换为解释器对象？
这是我尝试过的：
导入形状
助推器 = model.get_booster()
d_test = xgboost.DMatrix(X_test[0:100], y_test[0:100])
shap_values = booster.predict(d_test, pred_contribs=True)
shap.plots.beeswarm(shap_values)

返回结果：
类型错误：蜂群图需要一个“Explanation”对象作为“shap_values”参数。

为了澄清，如果可能的话，我想用 xgboost 内置库生成的值创建解释器对象。避免 shap.explainer 或 shap.TreeExplainer 函数调用是一个优先事项，因为它们需要更长的时间（几天）而不是几分钟才能返回。
[1]: https: //shap.readthedocs.io/en/latest/example_notebooks/tabular_examples/tree_based_models/Python%20Version%20of%20Tree%20SHAP.html
[2]:  https://shap.readthedocs.io/en/latest/example_notebooks/api_examples/plots/beeswarm.html#A-simple-beeswarm-summary-plot]]></description>
      <guid>https://stackoverflow.com/questions/77800583/converting-xgboost-shapely-values-to-shaps-explainer-object</guid>
      <pubDate>Thu, 11 Jan 2024 13:55:27 GMT</pubDate>
    </item>
    <item>
      <title>如何在 BART 模型中使用自定义嵌入？以及如何生成可由 BART 模型使用的位置嵌入？ [关闭]</title>
      <link>https://stackoverflow.com/questions/77792221/how-to-use-custom-embedding-in-bart-model-and-how-to-generate-positinal-embeddi</link>
      <description><![CDATA[]]></description>
      <guid>https://stackoverflow.com/questions/77792221/how-to-use-custom-embedding-in-bart-model-and-how-to-generate-positinal-embeddi</guid>
      <pubDate>Wed, 10 Jan 2024 09:28:11 GMT</pubDate>
    </item>
    <item>
      <title>张量流形状错误：要求输入和输出形状匹配？</title>
      <link>https://stackoverflow.com/questions/77174989/tensorflow-shape-error-asking-for-input-and-output-shape-to-match</link>
      <description><![CDATA[我是 Tensorflow 的新手，我意识到有很多关于形状问题的帖子，但我还无法完全将他们的解决方案应用于我的问题。因此，如果这是一个常见/多余的问题，请原谅。
上下文：我正在使用图像数据来预测图像的类型。更具体地说，我有许多图像的像素数据 (50x50x3)，这些图像属于 4 个类别之一 [风景、肖像、抽象、其他]。
代码细节：
我将尝试显示可能有问题的代码。当然，这个项目中还有其他代码，但为了简单起见，我将省略它（否则它将是一篇难以阅读的文章）；但是，如果没有找到解决方案，我将在后续内容中详细介绍。
我使用以下代码对标签进行了一次性编码
train_labels = to_categorical(train_labels, num_classes=NUM_CLASSES, dtype=&#39;float32&#39;)
然后，我通过提供带有图像路径列表的张量对象并在所有路径上运行 load_image 函数（未显示）来加载像素数据。
train_data = tf.data.Dataset.from_tensor_slices((train_files, train_labels))
train_data = train_data.map(load_image, num_parallel_calls=AUTOTUNE)
train_data = train_data.map(标准化, num_parallel_calls=AUTOTUNE)
train_data = train_data.shuffle(buffer_size=shuffle_buffer_size)
train_data = train_data.batch(batch_size)`

train_data 对象如下所示：
&lt;_BatchDataset element_spec=(TensorSpec(shape=(None, 50, 50, 3), dtype=tf.float32, name=None), TensorSpec(shape=(None, 4), dtype=tf .float32，名称=无））&gt;
我认为这是有道理的，因为输入数据是 50x50x3（具有批处理维度），而输出维度是 4，因为 4 个类的 one-hot 编码（具有批处理维度）。整个过程和结果跟我的验证数据是一样的。
但是，当我尝试训练模型时出现形状错误：
def simple_FFNN(image_height, image_width, num_channels, num_classes):
    input_shape = \[image_height, image_width, num_channels\] # 高度、宽度、通道
    模型=顺序（）
    model.add(layers.Input(shape=input_shape))
    model.add(layers.Dense(64,activation=&#39;relu&#39;))
    model.add(layers.Dense(units=num_classes,activation=&#39;softmax&#39;))

    返回模型

学习率 = 0.01
历元 = 3
模型 = simple_FFNN(IMAGE_HEIGHT, IMAGE_WIDTH, NUM_CHANNELS, NUM_CLASSES)
优化器 = 优化器.SGD(learning_rate=learning_rate)
损失=损失.categorical_crossentropy
model.compile(损失=损失,
优化器=优化器，
指标=&#39;准确性&#39;）

训练结果 = model.fit(
    训练数据，
    验证数据=验证数据，
    纪元=纪元，
    详细=1)`

错误是：
ValueError：形状 (None, 4) 和 (None, 50, 50, 4) 不兼容
第一个形状是我的输出形状，第二个形状几乎是我的输入形状，但通道数量略有偏差......几乎就像被替换的类数量一样。
无论如何，我不明白为什么输出形状和输入形状必须首先匹配。我一定是误解了这个问题。有人有什么想法吗？
谢谢
我尝试删除 train_data.batch() 中的批处理，但随后出现错误，指出 (None, 50, 50, 3) 和 (50, 50, 3) 不匹配 (这对我来说很有意义）。有趣的是，它显示 (50, 50, 3) 而不是 (50, 50, 4)，所以我不明白为什么最后一个维度被 4 交换。]]></description>
      <guid>https://stackoverflow.com/questions/77174989/tensorflow-shape-error-asking-for-input-and-output-shape-to-match</guid>
      <pubDate>Mon, 25 Sep 2023 18:29:13 GMT</pubDate>
    </item>
    <item>
      <title>Tensorflow 2：获取“警告：tensorflow：最近 9 次对 <function> 的调用中的 9 次触发了 tf.function 重新跟踪。跟踪成本高昂”</title>
      <link>https://stackoverflow.com/questions/61647404/tensorflow-2-getting-warningtensorflow9-out-of-the-last-9-calls-to-function</link>
      <description><![CDATA[我认为这个错误是由形状问题引起的，但我不知道在哪里。完整的错误消息建议执行以下操作：

&lt;块引用&gt;
  此外，tf.function 有experimental_relax_shapes=True 选项，可以放宽参数形状，从而避免不必要的回溯。 

当我在函数装饰器中输入这个参数时，它确实起作用了。 
@tf.function(experimental_relax_shapes=True)

可能是什么原因？完整代码如下：
导入操作系统
os.environ[&#39;TF_CPP_MIN_LOG_LEVEL&#39;] = &#39;3&#39;
将张量流导入为 tf
print(f&#39;Tensorflow 版本 {tf.__version__}&#39;)
从张量流导入keras
从tensorflow.keras.layers导入密集，Conv1D，GlobalAveragePooling1D，嵌入
将tensorflow_datasets导入为tfds
从tensorflow.keras.models导入模型

(train_data, test_data), info = tfds.load(&#39;imdb_reviews/subwords8k&#39;,
                                          split=[tfds.Split.TRAIN, tfds.Split.TEST],
                                          as_supervised=True, with_info=True)

padded_shapes = ([无], ())

train_dataset = train_data.shuffle(25000).\
    padded_batch（padded_shapes = padd_shapes，batch_size = 16）
test_dataset = test_data.shuffle(25000).\
    padded_batch（padded_shapes = padd_shapes，batch_size = 16）

n_words = info.features[&#39;text&#39;].encoder.vocab_size


类ConvModel（模型）：
    def __init__(自身):
        超级（ConvModel，自我）.__init__()
        self.embe = 嵌入（n_words，output_dim=16）
        self.conv = Conv1D(32, kernel_size=6, 激活=&#39;elu&#39;)
        self.glob = GlobalAveragePooling1D()
        self.dens = 密集(2)

    def 调用（自身，x，训练=无，掩码=无）：
        x = self.embe(x)
        x = self.conv(x)
        x = self.glob(x)
        x = self.dens(x)
        返回x


转换 = 转换模型()

转换（下一个（iter（train_dataset））[0]）

loss_object = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)

train_loss = tf.keras.metrics.Mean()
test_loss = tf.keras.metrics.Mean()

train_acc = tf.keras.metrics.CategoricalAccuracy()
test_acc = tf.keras.metrics.CategoricalAccuracy()

优化器 = tf.keras.optimizers.Adam(learning_rate=1e-3)


@tf.函数
def train_step（输入，标签）：
    使用 tf.GradientTape() 作为磁带：
        logits = conv(输入，训练=True)
        损失 = loss_object(标签, logits)
        训练损失（损失）
        train_acc(logits, 标签)

    梯度 = Tape.gradient(loss, conv.trainable_variables)
    optimizer.apply_gradients(zip(梯度, conv.trainable_variables))


@tf.函数
def test_step（输入，标签）：
    logits = conv(输入，训练=False)
    损失 = loss_object(标签, logits)
    测试损失（损失）
    test_acc（日志，标签）


def 学习():
    train_loss.reset_states()
    test_loss.reset_states()
    train_acc.reset_states()
    test_acc.reset_states()

    对于文本，train_dataset 中的目标：
        train_step（输入=文本，标签=目标）

    对于文本，目标在 test_dataset 中：
        test_step（输入=文本，标签=目标）


def main(epochs=2):
    对于 tf.range(1, epochs + 1) 中的纪元：
        学习（）
        template = &#39;训练损失{:&gt;5.3f}训练ACC {:.2f}测试损失{:&gt;5.3f}测试ACC {:.2f}&#39;

        打印（模板.格式（
            train_loss.result(),
            train_acc.result(),
            test_loss.result(),
            test_acc.result()
        ））

如果 __name__ == &#39;__main__&#39;:
    主要（纪元=1）
]]></description>
      <guid>https://stackoverflow.com/questions/61647404/tensorflow-2-getting-warningtensorflow9-out-of-the-last-9-calls-to-function</guid>
      <pubDate>Wed, 06 May 2020 23:47:47 GMT</pubDate>
    </item>
    </channel>
</rss>