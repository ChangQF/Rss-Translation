<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>标记为机器学习的活跃问题 - 堆栈内存溢出</title>
    <link>https://stackoverflow.com/questions/tagged/?tagnames=machine-learning&sort=active</link>
    <description>来自 stackoverflow.com 的最新 30 条</description>
    <lastBuildDate>Sun, 18 Aug 2024 18:18:48 GMT</lastBuildDate>
    <item>
      <title>使用自定义 yolov8 模型的图像无法在验证集中识别</title>
      <link>https://stackoverflow.com/questions/78885312/images-using-custom-yolov8-model-not-being-identified-in-validation-set</link>
      <description><![CDATA[我正在使用图像学习机器学习。我已经用总共三幅图像训练了一个新的 yolo v8 自定义模型。当我复制训练中使用的相同图像并运行时：
results = model.predict(source=&quot;/data/images/validate/*&quot;, device=device)

我得到以下输出
image 1/3 /data/images/validate/left1.jpg: 640x640 (无检测), 247.4ms
image 2/3 /data/images/validate/left2.jpg: 480x640 (无检测), 176.4ms
image 3/3 /data/images/validate/left3.jpg: 640x416 (无检测), 162.4ms

为什么检测失败？我该怎么做才能开始显示有助于理解为什么它无法检测到的指标？]]></description>
      <guid>https://stackoverflow.com/questions/78885312/images-using-custom-yolov8-model-not-being-identified-in-validation-set</guid>
      <pubDate>Sun, 18 Aug 2024 17:55:05 GMT</pubDate>
    </item>
    <item>
      <title>pytorch 自定义 SNN 模型的持续性问题 [梯度计算所需的变量之一已被就地操作修改]</title>
      <link>https://stackoverflow.com/questions/78885240/persistent-problem-with-pytorch-custom-snn-model-one-of-the-variables-needed-fo</link>
      <description><![CDATA[]]></description>
      <guid>https://stackoverflow.com/questions/78885240/persistent-problem-with-pytorch-custom-snn-model-one-of-the-variables-needed-fo</guid>
      <pubDate>Sun, 18 Aug 2024 17:16:29 GMT</pubDate>
    </item>
    <item>
      <title>无法在 Jupyter Notebook 中导入 nltk</title>
      <link>https://stackoverflow.com/questions/78885044/unable-to-import-nltk-in-jupyter-notebook</link>
      <description><![CDATA[我有一个 Jupyter Notebook。我使用以下代码行安装了 ntlk：
!pip install nltk

我得到以下输出：
要求已满足：./env/lib/python3.12/site-packages 中的 nltk（3.9）
要求已满足：./env/lib/python3.12/site-packages 中的 click（来自 nltk）（8.1.7）
要求已满足：./env/lib/python3.12/site-packages 中的 joblib（来自 nltk）（1.4.0）
要求已满足：./env/lib/python3.12/site-packages 中的 regex&gt;=2021.8.3（来自 nltk）（2024.7.24）
要求已满足：tqdm ./env/lib/python3.12/site-packages（来自 nltk）

现在当我使用 nltk 导入 nltk 时
import nltk 

我收到以下错误：
LookupError Traceback（最近一次调用最后一次）
文件 ~/Desktop/machine-learning/env/lib/python3.12/site-packages/nltk/corpus/util.py:84，在 LazyCorpusLoader.__load(self) 中
83 尝试：
---&gt; 84 root = nltk.data.find(f&quot;{self.subdir}/{zip_name}&quot;)
85 except LookupError:

File ~/Desktop/machine-learning/env/lib/python3.12/site-packages/nltk/data.py:579, in find(resource_name, path)
578 resource_not_found = f&quot;\n{sep}\n{msg}\n{sep}\n&quot;
--&gt; 579 raise LookupError(resource_not_found)

LookupError: 
**************************************************************************
未找到资源 wordnet。
请使用 NLTK 下载器获取资源：

我遗漏了什么？]]></description>
      <guid>https://stackoverflow.com/questions/78885044/unable-to-import-nltk-in-jupyter-notebook</guid>
      <pubDate>Sun, 18 Aug 2024 15:53:05 GMT</pubDate>
    </item>
    <item>
      <title>理解 LSTM torch</title>
      <link>https://stackoverflow.com/questions/78884735/understanding-the-lstm-torch</link>
      <description><![CDATA[大家好，我在训练包含 LSTM 层的模型时遇到了问题。
我怀疑错误可能是由于添加了数据加载器，因为当我使用完整数据集进行训练时，损失减少了。
我将非常感谢您的帮助。
配置：
num_epochs = 200
learning_rate = 1e-1
input_size = 599
hidden_​​size = 100
num_layers = 2
num_classes = 1
batch_size = 32

数据准备：
X_train_t = Variable(torch.Tensor(X_train.values))
y_train_t = Variable(torch.Tensor(y_train))

X_test_t =变量（torch.Tensor（X_test.values））
y_test_t = 变量（torch.Tensor（y_test））

X_train_t_final = torch.reshape（X_train_t，（X_train_t.shape[0]，1，X_train_t.shape[1]））
X_test_t_final = torch.reshape（X_test_t，（X_test_t.shape[0]，1，X_test_t.shape[1]））

print（“训练形状”，X​​_train_t_final.shape，y_train_t.shape）

print（“测试形状”，X​​_test_t_final.shape，y_test_t.shape）

train_dataset = TensorDataset（X_train_t_final，y_train_t）
test_dataset = TensorDataset(X_test_t_final, y_test_t)

train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=False, drop_last=True)
test_loader = DataLoader(test_dataset, batch_size=batch_size, shuffle=False, drop_last=True)

输出：
训练形状 torch.Size([8000, 1, 599]) torch.Size([8000, 1])
测试形状 torch.Size([998, 1, 599]) torch.Size([998, 1])

模型：
class LSTM1(nn.Module):
def __init__(self, num_classes, input_size, hidden_​​size, num_layers):
super(LSTM1, self).__init__()
self.num_classes = num_classes
self.num_layers = num_layers
self.input_size = input_size
self.hidden_​​size = hidden_​​size

self.lstm = nn.LSTM(input_size=input_size, hidden_​​size=hidden_​​size, num_layers=num_layers, batch_first=True)
self.fc_1 = nn.Linear(hidden_​​size, 128)
self.fc = nn.Linear(128, num_classes)
self.relu = nn.ReLU()

def forward(self,x):
h_0 = torch.zeros(self.num_layers, x.shape[0], self.hidden_​​size)
c_0 = torch.zeros(self.num_layers, x.shape[0], self.hidden_​​size)
输出，(hn, cn) = self.lstm(x, (h_0, c_0))
hn = hn[-1]
out = self.relu(hn)
out = self.fc_1(out)
out = self.relu(out)
out = self.fc(out)
返回 out

训练：
lstm1 = LSTM1(num_classes, input_size, hidden_​​size, num_layers)
criterion = torch.nn.MSELoss()
optimizer = torch.optim.Adam(lstm1.parameters(), lr=learning_rate) 
scheduler = optim.lr_scheduler.MultiStepLR(optimizer,里程碑=[30, 60, 90, 120, 150, 180]，伽马=0.2)

loss_train，loss_test = []，[]
mean_loss_train，mean_loss_test = 0，0

对于 tqdm 中的 epoch(range(num_epochs))：
对于 train_loader 中的 xb、yb：
optimizer.zero_grad()
输出 = lstm1.forward(xb)
损失 = criterion(输出，yb)
损失.backward()
optimizer.step()
mean_loss_train += loss.item()
损失.append(mean_loss_train / len(train_loader))
scheduler.step()

使用 torch.no_grad()：
对于 test_loader 中的 xb、yb：
输出 = lstm1.forward(xb)
损失 = criterion(输出， yb)
mean_loss_test += loss.item()
loss_test.append(mean_loss_test / len(test_loader))

if (epoch+1) % 20 == 0:
print(f&quot;Epoch: {epoch+1}, loss_train: {round(loss_train[-1], 5)}, loss_test: {round(loss_test[-1], 5)}, lr: {round(scheduler.get_last_lr()[0], 8)}&quot;)
在此处输入代码

学习输出：
Epoch: 20, loss_train: 82.76209, loss_test: 15.35703, lr: 0.1
Epoch: 40, loss_train: 85.63364, loss_test: 18.2109，lr：0.02
纪元：60，loss_train：85.87259，loss_test：18.30187，lr：0.004
纪元：80，loss_train：85.95106，loss_test：18.39842，lr：0.004
纪元：100，loss_train：86.0281，loss_test：18.49544，lr：0.0008
纪元：120，loss_train：86.10304，loss_test：18.58921，lr：0.00016
纪元：140，loss_train：86.21459，loss_test：18.65351，lr： 0.00016
Epoch：160，loss_train：86.32599，loss_test：18.80259，lr：3.2e-05
Epoch：180，loss_train：86.43954，loss_test：19.03469，lr：6.4e-06
Epoch：200，loss_train：86.58578，loss_test：19.16584，lr：6.4e-06

]]></description>
      <guid>https://stackoverflow.com/questions/78884735/understanding-the-lstm-torch</guid>
      <pubDate>Sun, 18 Aug 2024 13:32:37 GMT</pubDate>
    </item>
    <item>
      <title>使用 ZED2 相机进行图像处理</title>
      <link>https://stackoverflow.com/questions/78884614/image-processing-with-zed2-camera</link>
      <description><![CDATA[在使用 zed2 相机处理图像时，我尝试通过 roboflow 训练图像，也使用 visual studio code 通过代码训练它们。我希望相机能够正确读取交通标志，我刚刚为特定区域拍摄了 3k 的照片。但远处的图像没有被 zed 检测到或误读。（大约 3-4 米）。我如何改进图像处理。
是否有必要拍摄更多照片？所以我已经训练了超过 10k。但结果并没有太大不同，它仍然没有按照我想要的方式读取。
这是一张远距离照片，但我希望它从更远的距离读取，而不是 767 值
这是我运行的 py 代码
from ultralytics import YOLO

model= YOLO(&quot;yolov8n.yaml&quot;)

predict = model.train(data=&quot;data.yaml&quot;, epochs=500)


我还有 yolo 代码。
如果你愿意，我可以和你分享。
我使用 ros bridge。此外，我还尝试通过 rviz2 可视化相机。
我是新来的，所以我想问你。谢谢]]></description>
      <guid>https://stackoverflow.com/questions/78884614/image-processing-with-zed2-camera</guid>
      <pubDate>Sun, 18 Aug 2024 12:43:18 GMT</pubDate>
    </item>
    <item>
      <title>在 gpu 上训练 tensorflow 模型[关闭]</title>
      <link>https://stackoverflow.com/questions/78884301/train-tensorflow-model-on-gpu</link>
      <description><![CDATA[我的代码示例-
`xTrain=[...]
yTrain=[...]
model.fit(xTrain,yTrain)`
这花费了太多时间，因为模型很大，大约 3.4 gb，有 912,207,679 个可训练参数
告诉我将训练从 cpu 转移到 gpu 的最简单方法
我看到了许多其他问题和视频，但它们都很老了，而且 tf ha 最近发生了很大变化，所以请帮我做这个！！]]></description>
      <guid>https://stackoverflow.com/questions/78884301/train-tensorflow-model-on-gpu</guid>
      <pubDate>Sun, 18 Aug 2024 10:13:35 GMT</pubDate>
    </item>
    <item>
      <title>Spark ML：回归决策树中的用户定义杂质</title>
      <link>https://stackoverflow.com/questions/78884108/spark-ml-user-defined-impurity-in-regression-decision-trees</link>
      <description><![CDATA[我正在从 R 迁移到 PySpark。我有一个创建回归树的过程，该树目前使用 R 的 rpart 算法构建。
在 PySpark 中配置时，我无法看到指定自定义
自定义杂质函数的选项。我有一个倾斜的数据集，我不想在公式中使用均值和方差/标准差作为节点杂质的标准，而是想使用更适合我的倾斜数据的指标。
如何在 PySpark 中定义自定义杂质函数？
我查看了决策树回归的文档，并且impurity 参数的文档仅提到对 variance 的支持

impurity = Param(parent=&#39;undefined&#39;, name=&#39;impurity&#39;, doc=&#39;用于信息增益计算的标准（不区分大小写）。支持的选项：方差&#39;)

是否有任何解决方法来定义自定义杂质函数？]]></description>
      <guid>https://stackoverflow.com/questions/78884108/spark-ml-user-defined-impurity-in-regression-decision-trees</guid>
      <pubDate>Sun, 18 Aug 2024 08:38:47 GMT</pubDate>
    </item>
    <item>
      <title>Cartpole 强化学习 Python</title>
      <link>https://stackoverflow.com/questions/78883565/cartpole-reinforcement-learning-python</link>
      <description><![CDATA[我已经为 cartpole 环境和强化学习编写了代码，但我不知道从哪里开始“保存”强化学习的进度，以便我可以重新运行该程序来继续训练它，以提高程序的性能。如果有人能帮我编写代码，或者指引我去某个能帮上忙的地方，那就太好了。
我的程序：
import gym
import numpy as np
import time
env = gym.make(&quot;CartPole-v1&quot;, render_mode=&#39;human&#39;)
(state, _) = env.reset()
env.render()
env.step(0)
env.observation_space
env.observation_space.high
env.action_space
env.spec
env.spec.max_episode_steps
env.spec.reward_threshold
episodeNumber = 10000
timeSteps = 100
for episodeIndex in range(episodeNumber):
initial_state = env.reset
env.render()
appendedObservations = []
for timeIndex in range(timeSteps):
random_action = env.action_space.sample()
观察，奖励，终止，截断，信息 = env.step(random_action)
print(&quot;step&quot;, timeIndex, 观察，奖励，终止，信息)
appendedObservations. append(观察)
time.sleep(0.01)
if(terminated):
time.sleep(0.1)
break
env.close()

任何有关此事的帮助都将不胜感激。]]></description>
      <guid>https://stackoverflow.com/questions/78883565/cartpole-reinforcement-learning-python</guid>
      <pubDate>Sun, 18 Aug 2024 01:16:41 GMT</pubDate>
    </item>
    <item>
      <title>Sklearn 的分类报告中的支持是否意味着原始数据集或输入模型的数据集中的出现？</title>
      <link>https://stackoverflow.com/questions/78883478/does-support-in-sklearns-classification-report-mean-occurences-within-original</link>
      <description><![CDATA[我实现了一个机器学习模型；为了获得有关模型性能的一些信息，我查看了来自 sklearn.metrics 的分类报告。
例如，这是我的分类报告：
分类报告图片
我主要有两个问题：

正类和负类旁边的支持值（56 和 3147）与底部宏和加权平均值旁边的支持值（3203 和 3203）有什么区别，我应该使用哪一个？
从此链接，支持是每个类别中有多少个样本类。这是原始数据集中的样本，还是输入到机器学习模型中的样本？我之所以问这个问题，是因为我确实进行了重新采样，因为数据集是不平衡的。换句话说，正确的支持值是基于原始（不平衡）数据集还是输入到模型中的数据集（平衡）？

对于我的第一个问题，我相信“正确”的支持值是 3203 和 3203。这与我的第二个问题类似，因为我认为支持是基于输入到模型中的数据集，所以它应该是平衡的（因为模型如何“看到”原始数据集）？
顺便说一句，一切都在管道中，因此没有数据泄漏或模型“看到”测试数据，如果这可能相关的话。
我的问题与上面链接中的问题不是重复的，因为我问的是整个分类报告，而不仅仅是其中的一部分。]]></description>
      <guid>https://stackoverflow.com/questions/78883478/does-support-in-sklearns-classification-report-mean-occurences-within-original</guid>
      <pubDate>Sat, 17 Aug 2024 23:48:10 GMT</pubDate>
    </item>
    <item>
      <title>每次重复的训练时间都会发生变化[关闭]</title>
      <link>https://stackoverflow.com/questions/78882116/training-time-changes-in-each-repetition</link>
      <description><![CDATA[我正在 Nvidia RTX4090 GPU 中训练 Keras Tensorflow ResNet50 模型。我使用 Python 3.10、TF 2.10（我使用的是 Windows）、Keras 2.10、CUDA 12.5、CuDNN 8.9 和 PyCharm 作为解释器。该模型通常每轮大约需要 2 分钟。但是，我观察到有时在不更改任何超参数或代码的情况下，输入完全相同，一轮可能需要长达一小时。此外，这种情况有时会在同一次运行中发生：第一个轮需要 15 分钟，但其他轮需要 2 分钟，或者模型以正常速度运行三​​个轮，第四个轮需要半个多小时。在代码的开头，我使用了 tf.config.experimental.set_memory_growth(device, True) 和 tf.keras.backend.clear_session()，因为我读过这个问题，这可能会避免我的模型变慢。我还检查了训练期间的 GPU 使用情况，两种情况下的 GPU 使用情况相同（大约 100%）。
我希望使用相同输入的相同代码的训练时间相同。我是机器学习和 Keras 的新手，所以我可以检查其他什么来找出导致此问题的原因吗？]]></description>
      <guid>https://stackoverflow.com/questions/78882116/training-time-changes-in-each-repetition</guid>
      <pubDate>Sat, 17 Aug 2024 11:40:40 GMT</pubDate>
    </item>
    <item>
      <title>确保数据标记、数据注释的质量</title>
      <link>https://stackoverflow.com/questions/78882012/ensure-quality-of-data-labeling-data-annotation</link>
      <description><![CDATA[我有一个包含两百万数据图像、视频和文本的数据集。这些都未标记。我想雇佣来自世界各地的员工来标记它们。这是一个庞大的人数。我没有太多的数据经验。我想知道如何确保我的员工标记的数据的质量。我担心他们只是为了赚钱而浪费工作时间。
P/S：我不能使用 Scale&#39;AI 等其他公司为我标记。
对于简单的分类。我可以使用像 CAPCHA 这样的方法。它效果很好，但对于其他情况，如绘制边界框 = 或分割，我不知道如何检查标签数据的质量。]]></description>
      <guid>https://stackoverflow.com/questions/78882012/ensure-quality-of-data-labeling-data-annotation</guid>
      <pubDate>Sat, 17 Aug 2024 10:47:26 GMT</pubDate>
    </item>
    <item>
      <title>在这种情况下，torch.Tensor.backward() 函数如何工作？</title>
      <link>https://stackoverflow.com/questions/78872444/how-torch-tensor-backward-function-works-in-this-situation</link>
      <description><![CDATA[假设我将两个模型（例如 SAM 和 U-NET）的参数包含在名为“joint_parameters”的变量中，然后将优化器设置为
optimizer = torch.optim.Adam(joint_params, lr=1e-5)

假设“sam_loss”是从 SAM 模型的输出计算出来的损失。
当我执行时，U-NET 模型的参数会发生什么
sam_loss.backward()
optimizer.step() 

它对 U-NET 的参数有影响吗？还是什么都没有发生？
我认为 U-NET 的参数不会发生任何事情，但我只是想确定一下。]]></description>
      <guid>https://stackoverflow.com/questions/78872444/how-torch-tensor-backward-function-works-in-this-situation</guid>
      <pubDate>Wed, 14 Aug 2024 18:25:16 GMT</pubDate>
    </item>
    <item>
      <title>如何将 transformer 编码器中的注意力掩码“Mask”矩阵与 pytorch 的 nn.TransformerEncoder 中的潜在矩阵一起发送？</title>
      <link>https://stackoverflow.com/questions/76034630/how-do-i-send-an-attention-mask-mask-matrix-in-transformer-encoder-along-with</link>
      <description><![CDATA[我在 pytorch 中初始化了一个 transformer_encoder，如下所示：
transformer_encoder = nn.TransformerEncoder(nn.TransformerEncoderLayer(d_model=input_dim, nhead=num_heads), num_layers=num_layers)

现在我有一个潜在数据，其形状为 [8, 320, 512]，其中 8 是 batch_size，320 是序列长度，512 是嵌入维度。
我还有一个形状为 [320, 320] 的注意掩码。
我想将其传递到 transformer 编码器中，如下所示：
latent = torch.rand(8, 320, 512)
mask = torch.rand(320, 320)

output = transformer_encoder(latent, mask)

但它给了我错误：
“2D attn_mask 的形状是 torch.Size([320, 320])，但应该是 (8, 8)。&quot;
现在我沿着批处理维度重复矩阵，创建 8 个 (320, 320) 矩阵，使“mask”的形状为 [8, 320, 320]。当我再次运行上述代码时
latent.shape = [8, 320, 512]
mask.shape = [8, 320, 320]

output = transformer_encoder(latent, mask)

它给了我这个错误：
“3D attn_mask 的形状是 torch.Size([8, 320, 320])，但应该是 (2560, 8, 8)。&quot;
有人能解释一下这里的问题是什么吗？我该如何解决？或者正确的实现方法是什么？]]></description>
      <guid>https://stackoverflow.com/questions/76034630/how-do-i-send-an-attention-mask-mask-matrix-in-transformer-encoder-along-with</guid>
      <pubDate>Mon, 17 Apr 2023 11:24:23 GMT</pubDate>
    </item>
    <item>
      <title>用户警告：使用的目标尺寸 (torch.Size([1])) 与输入尺寸 (torch.Size([1, 1])) 不同</title>
      <link>https://stackoverflow.com/questions/72061934/userwarning-using-a-target-size-torch-size1-that-is-different-to-the-inpu</link>
      <description><![CDATA[我有这段代码：
actual_loes_score_g = actual_loes_score_t.to(self.device, non_blocking=True)

predicted_loes_score_g = self.model(input_g)

loss_func = nn.L1Loss()
loss_g = loss_func(
predicted_loes_score_g,
actual_loes_score_g,
)

其中 predicted_loes_score_g 为 tensor([[-24.9374]], grad_fn=&lt;AddmmBackward0&gt;) 且 actual_loes_score_g 为 tensor([20.], dtype=torch.float64)。（出于调试目的，我使用批处理大小 1。）
我收到此警告：

torch/nn/modules/loss.py:96：UserWarning：使用的目标大小 (torch.Size([1])) 与输入大小 (torch.Size([1, 1])) 不同。这很可能导致由于广播而导致结果不正确。请确保它们具有相同的大小。

我如何正确确保它们具有相同的大小？
我认为这可能是答案：
predicted_loes_score = predicted_loes_score_g.detach()[0]
loss_g = loss_func(
predicted_loes_score,
actual_loes_score_g,
)

但后来我收到此错误：
torch/autograd/__init__.py&quot;，第 154 行，在 Backward
Variable._execution_engine.run_backward(
RuntimeError：张量的元素 0 不需要 grad 并且没有 grad_fn
]]></description>
      <guid>https://stackoverflow.com/questions/72061934/userwarning-using-a-target-size-torch-size1-that-is-different-to-the-inpu</guid>
      <pubDate>Fri, 29 Apr 2022 17:50:27 GMT</pubDate>
    </item>
    <item>
      <title>什么是“张量”，它与向量有何不同？</title>
      <link>https://stackoverflow.com/questions/43656736/what-is-tensor-and-how-is-it-different-from-a-vector</link>
      <description><![CDATA[我是机器学习的初学者，我正面临这个问题。请提供简单的例子或内容，以便我能以最佳方式理解它。]]></description>
      <guid>https://stackoverflow.com/questions/43656736/what-is-tensor-and-how-is-it-different-from-a-vector</guid>
      <pubDate>Thu, 27 Apr 2017 11:40:42 GMT</pubDate>
    </item>
    </channel>
</rss>