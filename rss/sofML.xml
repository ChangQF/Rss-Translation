<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>标记为机器学习的活跃问题 - Thinbug</title>
    <link>https://stackoverflow.com/questions/tagged/?tagnames=machine-learning&sort=active</link>
    <description>来自 stackoverflow.com 的最新 30 个</description>
    <lastBuildDate>Sun, 10 Mar 2024 03:14:22 GMT</lastBuildDate>
    <item>
      <title>尝试将标签设置为张量时出现值错误</title>
      <link>https://stackoverflow.com/questions/78134521/value-error-when-trying-to-make-labels-to-tensor</link>
      <description><![CDATA[]]></description>
      <guid>https://stackoverflow.com/questions/78134521/value-error-when-trying-to-make-labels-to-tensor</guid>
      <pubDate>Sun, 10 Mar 2024 02:21:05 GMT</pubDate>
    </item>
    <item>
      <title>Scikit-learn 的多类目标编码器</title>
      <link>https://stackoverflow.com/questions/78133596/scikit-learns-target-encoder-for-multi-class</link>
      <description><![CDATA[如何转换本教程中的代码 https://towardsdatascience .com/target-encoding-for-multi-class-classification-c9a7bcb1a53
导入category_encoders作为ce
def target_encode_multiclass(X,y): #X,y 是 pandas df 和系列
    y=y.astype(str) #转换为字符串进行onehot编码
    enc=ce.OneHotEncoder().fit(y)
    y_onehot=enc.transform(y)
    class_names=y_onehot.columns #onehot 编码列的名称
    X_obj=X.select_dtypes(&#39;object&#39;) #单独的分类列
    X=X.select_dtypes(排除=&#39;对象&#39;)
    对于 class_names 中的 class_：
  
        enc=ce.TargetEncoder()
        enc.fit(X_obj,y_onehot[class_]) #转换所有分类
        temp=enc.transform(X_obj) #class_ 的列
        temp.columns=[str(x)+&#39;_&#39;+str(class_) for x in temp.columns]
        X=pd.concat([X,temp],axis=1) #添加到原始数据集
  
    返回X

只使用sklearn而不使用category_encoders？
目前有
from sklearn.preprocessing import OneHotEncoder, TargetEncoder
def target_encode_multiclass(X,y):
    y=y.astype(str)
    enc=OneHotEncoder().fit(y)
    y_onehot=enc.transform(y)
    类名=y.列
    X_obj=X.select_dtypes(&#39;对象&#39;)
    X=X.select_dtypes(排除=&#39;对象&#39;)
    对于 class_names 中的 class_：
        enc=目标编码器()
        enc.fit(X_obj, y_onehot[class_])
        temp=enc.transform(X_obj)
        temp.columns=[str(x)+&#39;_&#39;+str(class_) for x in temp.columns]
        X=pd.concat([X,温度],轴=1)
    返回X

抛出错误“enc.fit(X_obj, y_onehot[class_])”行上的索引维度必须为 1 或 2]]></description>
      <guid>https://stackoverflow.com/questions/78133596/scikit-learns-target-encoder-for-multi-class</guid>
      <pubDate>Sat, 09 Mar 2024 19:12:44 GMT</pubDate>
    </item>
    <item>
      <title>Python 中的 HIV/AIDS 治疗预测建模 - 特征选择 [关闭]</title>
      <link>https://stackoverflow.com/questions/78133554/predictive-modeling-for-hiv-aids-treatment-in-python-feature-selection</link>
      <description><![CDATA[我正在研究健康分析领域的预测建模项目，特别关注使用 Python 优化 HIV/AIDS 治疗结果。我收集了具有各种特征的数据集，包括患者人口统计数据、治疗历史和实验室结果。
导入 pandas 作为 pd
从 sklearn.model_selection 导入 train_test_split
从 sklearn.ensemble 导入 RandomForestClassifier
从 sklearn.feature_selection 导入 SelectFromModel

# 加载数据集（用于说明目的的虚拟数据）
数据 = pd.read_csv(&#39;hiv_aids_dataset.csv&#39;)
# 将数据拆分为特征 (X) 和目标变量 (y)
X = 数据。 Drop(&#39;治疗结果&#39;, 轴=1)
y = 数据[&#39;治疗结果&#39;]

# 将数据集分为训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 初始化随机森林分类器
clf = RandomForestClassifier(n_estimators=100, random_state=42)

# 拟合模型
clf.fit(X_train, y_train)

# 特征选择
模型 = SelectFromModel(clf, prefit=True)
selected_features = X.columns[model.get_support()]

print(&quot;选定的功能：&quot;, selected_features)

对于改进所选功能有什么建议或对此有任何替代方法吗？另外，有什么 EDA 建议可以提高我的模型的准确性吗？]]></description>
      <guid>https://stackoverflow.com/questions/78133554/predictive-modeling-for-hiv-aids-treatment-in-python-feature-selection</guid>
      <pubDate>Sat, 09 Mar 2024 19:01:33 GMT</pubDate>
    </item>
    <item>
      <title>如何以高精度（+ 90%）对面部特征嵌入进行分类。我可以在 svm 模型中进行哪些调整来对 20 多个类别进行分类</title>
      <link>https://stackoverflow.com/questions/78133540/how-to-classify-facials-features-embedding-with-high-accuracy-90-what-adjus</link>
      <description><![CDATA[我使用facenet提取特征并使用svm（pytorch中的nn.svm模型）进行分类。效果很好，但 20 堂课后，准确率下降到 75%。如何在利用 GPU 的同时优化 svm。
我使用了这个 svm 类模型
sklearn 的 svm 模型不使用 GPU，所以使用了这个
类 SVM(nn.Module):
    def __init__(自身):
        超级（SVM，自我）.__init__()
        self.fc = nn.Linear(X.shape[1], len(ClassList))

    def 前向（自身，x）：
        返回 self.fc(x)

但是对于 20 多个类别来说，这个准确率非常低
我也尝试过使用这个：
类 SoftmaxUsed(nn.Module):
    def __init__(自身):
        超级().__init__()
        self.layers = nn.Sequential(nn.Linear(512, 1024),
                                 ReLU(),
                                 nn.Dropout(0.2),
                                 nn.线性(1024, 1024),
                                 ReLU(),
                                 nn.Dropout(0.2),
                                 nn.Linear(1024, len(ClassList)),
                                 nn.LogSoftmax(dim=1))
    def 前向（自身，x）：
        返回 self.layers(x)

但准确率最高仍为 86%]]></description>
      <guid>https://stackoverflow.com/questions/78133540/how-to-classify-facials-features-embedding-with-high-accuracy-90-what-adjus</guid>
      <pubDate>Sat, 09 Mar 2024 18:56:09 GMT</pubDate>
    </item>
    <item>
      <title>如何计算微调稳定扩散模型的Inception Score</title>
      <link>https://stackoverflow.com/questions/78133289/how-to-calculate-inception-score-of-fine-tune-stable-diffusion-model</link>
      <description><![CDATA[我想计算稳定扩散模型的初始分数，我找到了分数代码，但不确定如何生成.npz
我们使用稳定扩散 1.5 进行微调
我想知道如何计算稳定扩散的初始分数以及 FID 等其他参数]]></description>
      <guid>https://stackoverflow.com/questions/78133289/how-to-calculate-inception-score-of-fine-tune-stable-diffusion-model</guid>
      <pubDate>Sat, 09 Mar 2024 17:40:54 GMT</pubDate>
    </item>
    <item>
      <title>构建新的推荐系统[关闭]</title>
      <link>https://stackoverflow.com/questions/78132563/building-new-recommender-system</link>
      <description><![CDATA[构建新闻推荐系统，使用什么样的推荐模型，基于什么进行推荐，如何收集新闻推荐系统的数据？此外，我需要相同的示例数据。

如何收集相关数据？
我需要示例数据。
]]></description>
      <guid>https://stackoverflow.com/questions/78132563/building-new-recommender-system</guid>
      <pubDate>Sat, 09 Mar 2024 13:48:55 GMT</pubDate>
    </item>
    <item>
      <title>使用mutual_info_classif进行多类目标和特征选择[关闭]</title>
      <link>https://stackoverflow.com/questions/78132544/multi-class-target-and-feature-selection-using-mutual-info-classif</link>
      <description><![CDATA[假设数据集有 1500 个特征、2500 个实例和 7 个类（类别/目标）。
在多类分类的情况下，目标列将有 7 个不同的值。我想使用mutual_info_classif提取重要特征。 mutual_info_classif 会按预期工作吗？
我已经完成了代码并得到了结果。我不太确定结果的有效性。]]></description>
      <guid>https://stackoverflow.com/questions/78132544/multi-class-target-and-feature-selection-using-mutual-info-classif</guid>
      <pubDate>Sat, 09 Mar 2024 13:43:09 GMT</pubDate>
    </item>
    <item>
      <title>准确度为 90%，RMSE 值也很低，但验证损失图在我的 LSTM 模型中有很多尖峰。我怎样才能解决这个问题？ [关闭]</title>
      <link>https://stackoverflow.com/questions/78132521/accuracy-is-90-rmse-values-is-also-low-but-validation-loss-graph-has-alot-of-s</link>
      <description><![CDATA[我创建了一个用于时间序列预测的 LSTM 模型。我的价值观如下，
测试集的 RMSE 分数：1.55
测试集的准确度：89.8838968601839

我的验证损失图中有很多峰值，如下所示。如何减少峰值并修复此图表？

我的代码如下，
从 keras.models 导入顺序

def lstm_model(trainX,trainY):
  #创建堆叠的 LSTM 模型
  模型=顺序（）
  model.add(LSTM(64,activation=&#39;relu&#39;,input_shape=(trainX.shape[1],trainX.shape[2]),return_sequences=False))
  模型.add(Dropout(0.2))
  model.add(密集(1))
  # 编译模型
  model.compile(optimizer=&#39;adam&#39;, loss=&#39;mse&#39;)

  print(&quot;LSTM 模型摘要&quot;)
  打印（模型.摘要（））
  打印(“---------------------------------------------- ----------”）

  # 拟合模型
  历史= model.fit（trainX，trainY，epochs = 200，batch_size = 8，validation_split = 0.01，verbose = 1）
  打印（历史）
  打印(“---------------------------------------------- ----------”）

  #model.save(&#39;/content/gdrive/MyDrive/MScProject/Implementation/lstm.h5&#39;)
  位置 = &#39;/content/gdrive/MyDrive/MScProject/Implementation/&#39; + 银行名称 + &#39;/lstm.h5&#39;
  模型.保存（位置）

  rmse = evaluate_models(历史, 模型)
  返回均方根误差

rmse = lstm_model(trainX,trainY)
模型测试（rmse）
]]></description>
      <guid>https://stackoverflow.com/questions/78132521/accuracy-is-90-rmse-values-is-also-low-but-validation-loss-graph-has-alot-of-s</guid>
      <pubDate>Sat, 09 Mar 2024 13:36:46 GMT</pubDate>
    </item>
    <item>
      <title>模型性能评估[关闭]</title>
      <link>https://stackoverflow.com/questions/78131181/model-performance-evaluation</link>
      <description><![CDATA[我正在 Open AI Gym 中制作一个具有稳定基线的自定义 Boid 植绒环境 3。 
它是如何工作的：

我传递了 boids 的位置文件。
对其进行 3000 个时间步长的模型测试，并输出每集的奖励，即位置文件

训练初始位置与测试不同。
我关心的是我的模型的性能。当从不同的初始位置陈述时，它会输出类似的奖励，并且机器人按照预期移动，我还生成了一个移动视频文件。
正确工作模型的输出
奖励功能
defcalculate_combined_reward(self,agent,neighbor_positions):
        总奖励=0
        out_of_flock=False

        if (len(neighbor_positions) &gt; 0):
            对于 neighbour_positions 中的 neighbour_position：
                
                距离 = np.linalg.norm(agent.position - neighbour_position)

                if (距离 
问题：
当我在不改变任何内容的情况下重新训练几次并进行测试时，只是为了保持一致性，它表现不佳，而且我的剧集奖励大多为负。虽然我什么也没改变。幸运的是，我保存了性能最佳的模型。
我训练并输出正确性能的模型（我已附上照片）是一个经过良好训练的模型，是侥幸还是过度拟合？]]></description>
      <guid>https://stackoverflow.com/questions/78131181/model-performance-evaluation</guid>
      <pubDate>Sat, 09 Mar 2024 03:50:52 GMT</pubDate>
    </item>
    <item>
      <title>梯度下降权重不断变大</title>
      <link>https://stackoverflow.com/questions/78115138/gradient-descent-weights-keep-getting-larger</link>
      <description><![CDATA[为了熟悉梯度下降算法，我尝试创建自己的线性回归模型。对于少数数据点来说它效果很好。但是当尝试使用更多数据来拟合它时，w0 和 w1 的大小总是增加。有人可以解释一下这种现象吗？
类线性回归：
    def __init__(自身, x_向量, y_向量):

        self.x_vector = np.array(x_vector, dtype=np.float64)
        self.y_向量 = np.array(y_向量, dtype=np.float64)
        自身.w0 = 0
        自身.w1 = 0

    def _get_predicted_values(self, x):
        公式 = lambda x: self.w0 + self.w1 * x
        返回公式(x)

    def_get_gradient_matrix（自身）：
        预测 = self._get_predicted_values(self.x_vector)
        w0_hat = sum((self.y_向量 - 预测))
        w1_hat = sum((self.y_向量 - 预测) * self.x_向量)

        梯度矩阵 = np.array([w0_hat, w1_hat])
        梯度矩阵 = -2 * 梯度矩阵

        返回梯度矩阵

    def fit(自我，step_size=0.001，num_iterations=500)：
        for _ in range(1, num_iterations):
            梯度矩阵 = self._get_gradient_matrix()
            self.w0 -= 步长大小 * (梯度矩阵[0])
            self.w1 -= 步长大小 * (梯度矩阵[1])

    def _show_coeffiecients（自身）：
        print(f&quot;w0: {self.w0}\tw1: {self.w1}\t&quot;)

    def 预测（自身，x）：
        y = 自身.w0 + 自身.w1 * x
        返回y

# 这工作正常
x = [x 表示 x 在范围 (-3, 3) 内]
f = 拉姆达 x: 5 * x - 7
y = [f(x_val) for x_val in x]

模型 = 线性回归(x, y)
模型.fit(num_iterations=3000)

model.show_coeffiecients() #输出：w0：-6.99999999999994 w1：5.00000000000002

#虽然这不是
x = [x for x in range(-50, 50)] # 增加 x 值的数量
f = 拉姆达 x: 5 * x - 7
y = [f(x_val) for x_val in x]

模型 = 线性回归(x, y)
模型.fit(num_iterations=3000)

model.show_coefficients()

最后一行产生警告：
运行时警告：乘法中遇到溢出
w1_hat = sum((self.y_向量 - 预测) * self.x_向量)
公式 = lambda x: self.w0 + self.w1 * x
]]></description>
      <guid>https://stackoverflow.com/questions/78115138/gradient-descent-weights-keep-getting-larger</guid>
      <pubDate>Wed, 06 Mar 2024 14:22:16 GMT</pubDate>
    </item>
    <item>
      <title>边际对数似然 GPytorch - 最小化的初始条件</title>
      <link>https://stackoverflow.com/questions/78031211/marginal-log-likelihood-gpytorch-initial-condition-for-minimization</link>
      <description><![CDATA[这个问题是针对高斯过程训练的情况提出的，但我想它也适用于神经网络。
# 找到最优模型超参数
模型.train()
可能性.train()

# 使用 adam 优化器
Optimizer = torch.optim.Adam(model.parameters(), lr=0.1) # 包含高斯似然参数

#“损失”对于 GP - 边际对数似然
mll = gpytorch.mlls.ExactMarginalLogLikelihood（可能性，模型）

对于范围内的 i（训练迭代）：
    优化器.zero_grad()
    输出=模型（train_x）
    损失 = -mll(输出, train_y)
    loss.backward()
    print(&#39;Iter %d/%d - 损失: %.3f&#39; % (i + 1,training_iterations,loss.item()))
    优化器.step()

在典型的训练过程中，我们试图最小化损失函数（在本例中为边际对数似然）。我的问题是，最小化的初始条件是什么？如何将其输入/输出到训练循环？
我只是想从数学角度理解训练阶段，发现 Pytorch “以一种无形的方式”做了很多事情。]]></description>
      <guid>https://stackoverflow.com/questions/78031211/marginal-log-likelihood-gpytorch-initial-condition-for-minimization</guid>
      <pubDate>Wed, 21 Feb 2024 02:05:44 GMT</pubDate>
    </item>
    <item>
      <title>如何在 mlx 中进行蒙版填充？</title>
      <link>https://stackoverflow.com/questions/77963476/how-do-i-do-masked-fill-in-mlx</link>
      <description><![CDATA[我想在 mlx 中实现 masked_fill，但它与 float(&#39;-inf&#39;) 配合效果不佳
https://pytorch.org/docs/stable/generate /torch.Tensor.masked_fill.html
我正在尝试使用 mlx.core.where 来实现此目的
masked_tensor = mlx.core.where(mask, mlx.core.array(float(&#39;-inf&#39;)), mlx.core.array(0))

但是对于面具
数组([[假，假，真，真]，
       [假，假，真，真]，
       [假，假，真，真]，
       [假，假，真，真]]，dtype = bool）

这会返回
数组([[nan, nan, -inf, -inf],
       [南，南，-inf，-inf]，
       [南，南，-inf，-inf]，
       [南，南，-inf，-inf]]，dtype = float32）

这不是我想要的。理想情况下它会返回
数组([[0, 0, -inf, -inf],
       [0, 0, -inf, -inf],
       [0, 0, -inf, -inf],
       [0, 0, -inf, -inf]], dtype=float32)

帮助]]></description>
      <guid>https://stackoverflow.com/questions/77963476/how-do-i-do-masked-fill-in-mlx</guid>
      <pubDate>Thu, 08 Feb 2024 16:55:27 GMT</pubDate>
    </item>
    <item>
      <title>使用迁移学习时模型不学习</title>
      <link>https://stackoverflow.com/questions/76521642/model-is-not-learning-when-using-transfer-learning</link>
      <description><![CDATA[我是机器学习的初学者，我正在尝试开发一个可以根据面部数据集预测年龄的模型。然而，我的模型没有学习，我正在努力找出原因。我正在导入 VGG16 架构，但它仍然无法学习。我已经搜索过论坛，甚至尝试仅在 2 个示例上训练模型，但它仍然无法过拟合。
在整个训练过程中，训练准确性几乎没有增加，验证准确性也没有增加。
path = “../input/agedetection/dataset/dataset”
文件= os.listdir(路径)
X = []
年龄_温度 = []

对于文件中的文件：
    img = cv2.imread(路径+&#39;/&#39;+文件)
    img = cv2.resize(img, dsize = target_size)
    X.追加（img）
    字段 = file.split(&#39;_&#39;)
    Age_temp.append(字段[0])

X = np.array(X).astype(&#39;float32&#39;)
X = X/255

#将年龄转换为不同的括号 - 0-20, 21-40, 41-60,61+
年龄 = np.zeros(len(age_temp))

对于范围内的 i(len(age_temp))：
    curr_age = int(age_temp[i])
    如果 curr_age &lt;= 20：
        值=0
    elif curr_age &lt;= 40：
        值=1
    elif curr_age &lt;= 60：
        值=2
    别的：
        值=3
    年龄[i] = val

年龄 = to_categorical(年龄, 班级数 = 4)
年龄 = 年龄.astype(&#39;float32&#39;)

base_model_age = tf.keras.applications.VGG16(input_shape=input_shape,include_top=False,weights=“imagenet”)
对于 base_model_age.layers[:-20] 中的图层：
    层.trainable=False
model_age = 顺序()
model_age.add(base_model_age)
model_age.add(压平())
model_age.add（密集（1024，激活=&#39;relu&#39;））
model_age.add（密集（4，激活=&#39;relu&#39;））

model_age.compile(优化器=Adam(亚当),
              损失=&#39;mse&#39;
              ,指标=[&#39;准确性&#39;])

hist_age = model_age.fit(X_train,age_train,
                         验证数据=（X_验证，年龄_验证），
                         epochs=10，steps_per_epoch=256，
                         回调=[lrd, mcp])
]]></description>
      <guid>https://stackoverflow.com/questions/76521642/model-is-not-learning-when-using-transfer-learning</guid>
      <pubDate>Wed, 21 Jun 2023 09:05:40 GMT</pubDate>
    </item>
    <item>
      <title>Python - 从 OLS 模型中获取排列重要性</title>
      <link>https://stackoverflow.com/questions/70623835/python-grabbing-permutation-importance-from-ols-model</link>
      <description><![CDATA[正如标题所述，我试图获取 OLS 模型中特征的排列重要性，但我得到的是：
TypeError：估计器应该是实现“fit”方法的估计器，已通过
这是我的代码：
导入 pandas 作为 pd
从 sklearn.inspection 导入 permutation_importance
从 sklearn.model_selection 导入 train_test_split
将 statsmodels.api 导入为 sm

df = pd.read_csv(r&#39;my_file&#39;)

X = df.drop（我的因变量）
y = df[我的因变量）

X_train, X_test, y_train, y_test = train_test_split(X, y)

模型 - sm.OLS(y_train, X_train).fit()
打印（模型.摘要（））

分数 = permuation_importance(模型, X_train, y_train, 评分=&#39;neg_root_mean_squared_error&#39;)

重要性 = 分数.importances_mean

对于枚举中的 i,v（重要性）：
   print(&#39;特征：%0d，得分：%.5f&#39; % (i,v))

我有一种感觉，因为我使用的模型不是来自 sklearn，所以想知道是否有办法从 OLS 模型中获取特征指标？谢谢！！]]></description>
      <guid>https://stackoverflow.com/questions/70623835/python-grabbing-permutation-importance-from-ols-model</guid>
      <pubDate>Fri, 07 Jan 2022 15:51:40 GMT</pubDate>
    </item>
    <item>
      <title>如何在 Keras 中累积大批量的梯度</title>
      <link>https://stackoverflow.com/questions/55268762/how-to-accumulate-gradients-for-large-batch-sizes-in-keras</link>
      <description><![CDATA[我正在使用一个对内存要求很高的 CNN 模型来执行分类任务。
这对我在训练期间可以使用的批量大小造成了很大的限制。
一种解决方案是在训练期间累积梯度，这意味着模型的权重不会在每个批次后更新。相反，相同的权重用于多个批次，而每个批次的梯度会被累积，然后针对单个权重更新操作进行平均。
我正在使用 Tensorflow 后端 Keras，并且我非常确定 Keras 没有现成的函数/方法来实现此目的。
如何为 Keras/tensorflow 模型完成此操作？]]></description>
      <guid>https://stackoverflow.com/questions/55268762/how-to-accumulate-gradients-for-large-batch-sizes-in-keras</guid>
      <pubDate>Wed, 20 Mar 2019 19:26:43 GMT</pubDate>
    </item>
    </channel>
</rss>