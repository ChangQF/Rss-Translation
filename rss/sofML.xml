<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>标记为机器学习的活跃问题 - Thinbug</title>
    <link>https://stackoverflow.com/questions/tagged/?tagnames=machine-learning&sort=active</link>
    <description>来自 stackoverflow.com 的最新 30 个</description>
    <lastBuildDate>Sun, 10 Mar 2024 12:21:37 GMT</lastBuildDate>
    <item>
      <title>我无法找出代码中的错误（Python）</title>
      <link>https://stackoverflow.com/questions/78135637/i-cant-figure-out-the-error-in-my-code-python</link>
      <description><![CDATA[]]></description>
      <guid>https://stackoverflow.com/questions/78135637/i-cant-figure-out-the-error-in-my-code-python</guid>
      <pubDate>Sun, 10 Mar 2024 11:12:18 GMT</pubDate>
    </item>
    <item>
      <title>视觉中的 Masked 自动编码器中的解码器需要什么单独的位置嵌入</title>
      <link>https://stackoverflow.com/questions/78135553/what-is-the-need-of-separate-position-embeddings-for-a-decoder-in-masked-auto-en</link>
      <description><![CDATA[我正在尝试了解 MAE 架构。在 MAE 架构中，我们有编码器位置嵌入和解码器位置嵌入。我知道这些可以是固定的（恒定的）或可以学习的。如果它们是恒定的，则解码器和编码器的尺寸相同，并且位置嵌入不需要梯度-&gt;为什么我们需要为解码器进行单独的位置嵌入？例如-&gt;您获取编码补丁，然后首先根据掩码和 ids_restore -&gt; 进行掩码。您对已被屏蔽的 ID 有所了解。您可以简单地获取这些 id 处嵌入张量值的位置并将其相加。然后在解码器中-&gt;因为我们 unshuffle 提供了屏蔽和未屏蔽补丁的整个长度，所以我们可以简单地重用之前的 who 位置 id。我不明白为什么需要初始化单独的解码器位置嵌入。
# 编码器
self.patch_embed = PatchEmbed(img_size, patch_size, in_chans, embed_dim)
num_patches = self.patch_embed.num_patches
self.cls_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
self.pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, embed_dim), require_grad=False) # 固定 sin-cos 嵌入


# 解码器
self.decoder_embed = nn.Linear（embed_dim，decoder_embed_dim，偏差= True）
self.mask_token = nn.Parameter(torch.zeros(1, 1,decoder_embed_dim))
self.decoder_pos_embed = nn.Parameter(torch.zeros(1, num_patches + 1, detector_embed_dim), require_grad=False) # 固定 sin-cos 嵌入

在上面的代码中，我想了解编码器和解码器具有不同 pos_embed 的原因是否是为了适应并为两个不同的嵌入暗淡提供灵活性，或者是否有更多意义。上面的代码来自 git 上的 MAE 存储库]]></description>
      <guid>https://stackoverflow.com/questions/78135553/what-is-the-need-of-separate-position-embeddings-for-a-decoder-in-masked-auto-en</guid>
      <pubDate>Sun, 10 Mar 2024 10:41:48 GMT</pubDate>
    </item>
    <item>
      <title>是否可以在 OpenCV 中创建大型模型而不需要大量 RAM？ [关闭]</title>
      <link>https://stackoverflow.com/questions/78135277/is-it-possible-to-creat-a-large-model-in-opencv-without-needing-redicouls-amount</link>
      <description><![CDATA[我正在尝试在 OpenCV 中创建一个与人脸检测相关的模型。我拥有的数据集大约有 50,000 张图像。然而，当我尝试使用大量数据训练模型时，内存使用量就会大幅上升。即使在尝试批处理和卸载加载的 cv::mat 图像时，模型的大小也会增加（我想这是可以预料的。）。我还尝试将每个图像的大小调整为 128x128 并使用灰度，但这似乎也没有多大帮助。
是否可以在 OpenCV 中创建一个非常大的模型（包含 50,000 张图像），而不需要 300GB 的 RAM？]]></description>
      <guid>https://stackoverflow.com/questions/78135277/is-it-possible-to-creat-a-large-model-in-opencv-without-needing-redicouls-amount</guid>
      <pubDate>Sun, 10 Mar 2024 09:03:23 GMT</pubDate>
    </item>
    <item>
      <title>多智能体深度 q 学习深入研究开发状态</title>
      <link>https://stackoverflow.com/questions/78134963/multi-agent-deep-q-learning-takes-a-dive-at-exploitation-state</link>
      <description><![CDATA[我正在使用 double &amp;深度 Q 学习对决。达到 epsilon 0.01 后不久，奖励开始走下坡路。我正在尝试不同的超参数，但仍然得到这样的结果。
问题如下
我有很多接收任务的服务器，它们可以在本地处理任务，也可以将其卸载到其他服务器或云上。它与这篇论文类似，但有一些修改。但本质非常相似。
我尝试了学习率、epsilon 递减和episode 的多种组合，但不断看到这样的结果。
]]></description>
      <guid>https://stackoverflow.com/questions/78134963/multi-agent-deep-q-learning-takes-a-dive-at-exploitation-state</guid>
      <pubDate>Sun, 10 Mar 2024 06:50:38 GMT</pubDate>
    </item>
    <item>
      <title>ReLU 激活的拟合模型函数出现错误</title>
      <link>https://stackoverflow.com/questions/78134915/error-in-fit-model-function-for-relu-activation</link>
      <description><![CDATA[我尝试过，但收到此错误：
&lt;前&gt;&lt;代码&gt;纪元 1/5
回溯（最近一次调用最后一次）：
  文件“d:\University\Sem6\CV\project\project.py”，第 580 行，在  中
    model.fit（train_augmented，steps_per_epoch=train_steps，validation_data=val_augmented，validation_steps=valid_steps，epochs=epochs）
  文件“D:\University\Sem6\CV\project\myenv\Lib\site-packages\keras\src\utils\traceback_utils.py”，第 70 行，在 error_handler 中
    从 None 引发 e.with_traceback(filtered_tb)
  文件“D:\University\Sem6\CV\project\myenv\Lib\site-packages\tensorflow\python\eager\execute.py”，第 53 行，quick_execute
    张量 = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tensorflow.python.framework.errors_impl.InvalidArgumentError：图形执行错误：
在定义于（最近一次调用最后）的节点 inception_v1/dense_3/Relu 处检测到：
  文件“d:\University\Sem6\CV\project\project.py”，第 580 行，在  中
矩阵大小不兼容：In[0]：[32,2048]，In[1]：[512,1024]
         [[{{节点 inception_v1/dense_3/Relu}}]] [操作：__inference_train_function_16627]

我的代码：
batch_size = 32 # 根据您的系统功能调整此值
train_steps = len(train_images)
valid_steps = len(val_images)
model.fit（train_augmented，steps_per_epoch=train_steps，validation_data=val_augmented，validation_steps=valid_steps，epochs=epochs）


如何解决这个错误？]]></description>
      <guid>https://stackoverflow.com/questions/78134915/error-in-fit-model-function-for-relu-activation</guid>
      <pubDate>Sun, 10 Mar 2024 06:27:30 GMT</pubDate>
    </item>
    <item>
      <title>如何在Python中处理人脸识别中的规格眩光？</title>
      <link>https://stackoverflow.com/questions/78134869/how-to-handle-specs-glare-in-face-recognition-in-python</link>
      <description><![CDATA[我想构建一个基于 python Flask api 的应用程序，我想发送 2 个人物图像（脸部图像）的路径（url 或本地图像），并且如果两张脸都匹配（两张图片都属于），我希望得到“是”的响应同一个人），如果图像是不同的人，则不会。我为此使用了face_recognition 库。在我介绍戴眼镜的人的照片之前，这个算法一直运行良好。该模型无法识别眼镜中是否有眩光。如何进行？有没有一种预处理方法可以提供帮助？或者我应该搬到另一个图书馆？
&lt;前&gt;&lt;代码&gt;
导入人脸识别
导入CV2
将 numpy 导入为 np
从日期时间导入日期时间
从烧瓶导入烧瓶，请求，jsonify
导入人脸识别
导入请求
从 io 导入 BytesIO
从日期时间导入日期时间
从 PIL 导入图像
应用程序=烧瓶（__名称__）

def preprocess_image(image_path,resize_height=400):
    if image_path.startswith((&#39;http://&#39;, &#39;https://&#39;)):
            响应 = requests.get(图像路径)
            图像 = Image.open(BytesIO(响应.内容))
    别的：
        图像 = Image.open(图像路径)
    exif_data = image.getexif()

    如果 exif_数据：
        如果 exif_data.get(274) == 6:
            图像 = 图像.旋转(270)
    宽度，长度=图像大小
    比例 = resize_height / 长度
    new_width = int(宽度 * 比例)
    打印（图像路径，图像大小，比例，新宽度）
    
    new_width = int(宽度 * 比例)
    resized_image = image.resize((new_width, resize_height))

    rgb_image = resized_image.convert(“RGB”)
    numpy_image = np.array(rgb_image)

    返回numpy_image


@app.route(&#39;/&#39;,methods = [&#39;GET&#39;,&#39;POST&#39;])
def home():
    返回“服务器正在运行”
@app.route(&#39;/compare&#39;,methods = [&#39;GET&#39;,&#39;POST&#39;])
defface_compare():
    st = 日期时间.now()
    数据 = request.get_json()
    image_path1 = 数据[&#39;img1&#39;]
    image_path2 = 数据[&#39;img2&#39;]

    已处理图像1 = 预处理图像(图像路径1)
    已处理图像2 = 预处理图像(图像路径2)
    
    面部位置1 = 面部识别.面部位置（处理后的图像1）
    面部位置2 = 面部识别.面部位置(processed_image2)
    #show_bounding_box(face_locations1,processed_image1)
    #show_bounding_box(face_locations2,processed_image2)
    如果不是face_locations1：
        return jsonify({&#39;result&#39;: &#39;未找到面 1&#39;, &#39;time&#39;:str(datetime.now()-st)})
    如果不是face_locations2：
        return jsonify({&#39;result&#39;: &#39;未找到人脸 2&#39;, &#39;time&#39;:str(datetime.now()-st)})

    face_encoding1=face_recognition.face_encodings(processed_image1,known_face_locations=face_locations1,model=&#39;小&#39;)[0]
    face_encoding2=face_recognition.face_encodings(processed_image2,known_face_locations=face_locations2,model=&#39;小&#39;)[0]
    
    结果=face_recognition.compare_faces([face_encoding1],face_encoding2,公差=0.47)
    return jsonify({&#39;结果&#39;: str(结果[0]), &#39;时间&#39;:str(datetime.now()-st)})

def show_bounding_box(face_loc, img):
    边界框 = []
    对于face_loc中的face_location：
        上、右、下、左 = 面部位置
        bounding_boxes.append((左、上、右、下))
    对于bounding_boxes中的（左，上，右，下）：
        cv2.矩形(img, (左, 上), (右, 下), (0, 255, 0), 2)
    cv2.imshow(“带有边界框的面孔”, img)
    cv2.waitKey(0)

如果 __name__ == &#39;__main__&#39;:
    app.run（调试=True，线程=True）
]]></description>
      <guid>https://stackoverflow.com/questions/78134869/how-to-handle-specs-glare-in-face-recognition-in-python</guid>
      <pubDate>Sun, 10 Mar 2024 06:01:06 GMT</pubDate>
    </item>
    <item>
      <title>我正在研究一个项目：使用深度学习进行 NER 提取。这是我第一次从事这方面的工作。如何访问访问数据集</title>
      <link>https://stackoverflow.com/questions/78134821/i-am-working-on-a-project-ner-extraction-using-my-deep-learning-this-is-my-fi</link>
      <description><![CDATA[我发现了某些遗留数据集，例如 CoNull 2003 和 OntoNotes。我如何访问这些数据集并在我的项目中使用它们？他们各自的网站显示了很多我不知道的信息。请帮忙
我正在尝试启动该项目。需要建议]]></description>
      <guid>https://stackoverflow.com/questions/78134821/i-am-working-on-a-project-ner-extraction-using-my-deep-learning-this-is-my-fi</guid>
      <pubDate>Sun, 10 Mar 2024 05:34:51 GMT</pubDate>
    </item>
    <item>
      <title>尝试将标签设置为张量时出现值错误</title>
      <link>https://stackoverflow.com/questions/78134521/value-error-when-trying-to-make-labels-to-tensor</link>
      <description><![CDATA[]]></description>
      <guid>https://stackoverflow.com/questions/78134521/value-error-when-trying-to-make-labels-to-tensor</guid>
      <pubDate>Sun, 10 Mar 2024 02:21:05 GMT</pubDate>
    </item>
    <item>
      <title>Scikit-learn 的多类目标编码器</title>
      <link>https://stackoverflow.com/questions/78133596/scikit-learns-target-encoder-for-multi-class</link>
      <description><![CDATA[如何转换本教程中的代码 https://towardsdatascience .com/target-encoding-for-multi-class-classification-c9a7bcb1a53
导入category_encoders作为ce
def target_encode_multiclass(X,y): #X,y 是 pandas df 和系列
    y=y.astype(str) #转换为字符串进行onehot编码
    enc=ce.OneHotEncoder().fit(y)
    y_onehot=enc.transform(y)
    class_names=y_onehot.columns #onehot 编码列的名称
    X_obj=X.select_dtypes(&#39;object&#39;) #单独的分类列
    X=X.select_dtypes(排除=&#39;对象&#39;)
    对于 class_names 中的 class_：
  
        enc=ce.TargetEncoder()
        enc.fit(X_obj,y_onehot[class_]) #转换所有分类
        temp=enc.transform(X_obj) #class_ 的列
        temp.columns=[str(x)+&#39;_&#39;+str(class_) for x in temp.columns]
        X=pd.concat([X,temp],axis=1) #添加到原始数据集
  
    返回X

只使用sklearn而不使用category_encoders？
目前有
from sklearn.preprocessing import OneHotEncoder, TargetEncoder
def target_encode_multiclass(X,y):
    y=y.astype(str)
    enc=OneHotEncoder().fit(y)
    y_onehot=enc.transform(y)
    类名=y.列
    X_obj=X.select_dtypes(&#39;对象&#39;)
    X=X.select_dtypes(排除=&#39;对象&#39;)
    对于 class_names 中的 class_：
        enc=目标编码器()
        enc.fit(X_obj, y_onehot[class_])
        temp=enc.transform(X_obj)
        temp.columns=[str(x)+&#39;_&#39;+str(class_) for x in temp.columns]
        X=pd.concat([X,温度],轴=1)
    返回X

抛出错误“enc.fit(X_obj, y_onehot[class_])”行上的索引维度必须为 1 或 2]]></description>
      <guid>https://stackoverflow.com/questions/78133596/scikit-learns-target-encoder-for-multi-class</guid>
      <pubDate>Sat, 09 Mar 2024 19:12:44 GMT</pubDate>
    </item>
    <item>
      <title>Python 中 HIV/AIDS 治疗的预测建模 - 特征选择 [关闭]</title>
      <link>https://stackoverflow.com/questions/78133554/predictive-modeling-for-hiv-aids-treatment-in-python-feature-selection</link>
      <description><![CDATA[我正在研究健康分析领域的预测建模项目，特别关注使用 Python 优化 HIV/AIDS 治疗结果。我收集了具有各种特征的数据集，包括患者人口统计数据、治疗历史和实验室结果。
导入 pandas 作为 pd
从 sklearn.model_selection 导入 train_test_split
从 sklearn.ensemble 导入 RandomForestClassifier
从 sklearn.feature_selection 导入 SelectFromModel

# 加载数据集（用于说明目的的虚拟数据）
数据 = pd.read_csv(&#39;hiv_aids_dataset.csv&#39;)
# 将数据拆分为特征 (X) 和目标变量 (y)
X = 数据。 Drop(&#39;治疗结果&#39;, 轴=1)
y = 数据[&#39;治疗结果&#39;]

# 将数据集分为训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 初始化随机森林分类器
clf = RandomForestClassifier(n_estimators=100, random_state=42)

# 拟合模型
clf.fit(X_train, y_train)

# 特征选择
模型 = SelectFromModel(clf, prefit=True)
selected_features = X.columns[model.get_support()]

print(&quot;选定的功能：&quot;, selected_features)

对于改进所选功能有什么建议或对此有任何替代方法吗？另外，有什么 EDA 建议可以提高我的模型的准确性吗？]]></description>
      <guid>https://stackoverflow.com/questions/78133554/predictive-modeling-for-hiv-aids-treatment-in-python-feature-selection</guid>
      <pubDate>Sat, 09 Mar 2024 19:01:33 GMT</pubDate>
    </item>
    <item>
      <title>如何以高精度（+ 90%）对面部特征嵌入进行分类。我可以在 svm 模型中进行哪些调整来对 20 多个类别进行分类</title>
      <link>https://stackoverflow.com/questions/78133540/how-to-classify-facials-features-embedding-with-high-accuracy-90-what-adjus</link>
      <description><![CDATA[我使用facenet提取特征并使用svm（pytorch中的nn.svm模型）进行分类。效果很好，但 20 堂课后，准确率下降到 75%。如何在利用 GPU 的同时优化 svm。
我使用了这个 svm 类模型
sklearn 的 svm 模型不使用 GPU，所以使用了这个
类 SVM(nn.Module):
    def __init__(自身):
        超级（SVM，自我）.__init__()
        self.fc = nn.Linear(X.shape[1], len(ClassList))

    def 前向（自身，x）：
        返回 self.fc(x)

但是对于 20 多个类别来说，这个准确率非常低
我也尝试过使用这个：
类 SoftmaxUsed(nn.Module):
    def __init__(自身):
        超级().__init__()
        self.layers = nn.Sequential(nn.Linear(512, 1024),
                                 ReLU(),
                                 nn.Dropout(0.2),
                                 nn.线性(1024, 1024),
                                 ReLU(),
                                 nn.Dropout(0.2),
                                 nn.Linear(1024, len(ClassList)),
                                 nn.LogSoftmax(dim=1))
    def 前向（自身，x）：
        返回 self.layers(x)

但准确率最高仍为 86%]]></description>
      <guid>https://stackoverflow.com/questions/78133540/how-to-classify-facials-features-embedding-with-high-accuracy-90-what-adjus</guid>
      <pubDate>Sat, 09 Mar 2024 18:56:09 GMT</pubDate>
    </item>
    <item>
      <title>梯度下降权重不断变大</title>
      <link>https://stackoverflow.com/questions/78115138/gradient-descent-weights-keep-getting-larger</link>
      <description><![CDATA[为了熟悉梯度下降算法，我尝试创建自己的线性回归模型。对于少数数据点来说它效果很好。但是当尝试使用更多数据来拟合它时，w0 和 w1 的大小总是增加。有人可以解释一下这种现象吗？
类线性回归：
    def __init__(自身, x_向量, y_向量):

        self.x_vector = np.array(x_vector, dtype=np.float64)
        self.y_向量 = np.array(y_向量, dtype=np.float64)
        自身.w0 = 0
        自身.w1 = 0

    def _get_predicted_values(self, x):
        公式 = lambda x: self.w0 + self.w1 * x
        返回公式(x)

    def_get_gradient_matrix（自身）：
        预测 = self._get_predicted_values(self.x_vector)
        w0_hat = sum((self.y_向量 - 预测))
        w1_hat = sum((self.y_向量 - 预测) * self.x_向量)

        梯度矩阵 = np.array([w0_hat, w1_hat])
        梯度矩阵 = -2 * 梯度矩阵

        返回梯度矩阵

    def fit(自我，step_size=0.001，num_iterations=500)：
        for _ in range(1, num_iterations):
            梯度矩阵 = self._get_gradient_matrix()
            self.w0 -= 步长大小 * (梯度矩阵[0])
            self.w1 -= 步长大小 * (梯度矩阵[1])

    def _show_coeffiecients（自身）：
        print(f&quot;w0: {self.w0}\tw1: {self.w1}\t&quot;)

    def 预测（自身，x）：
        y = 自身.w0 + 自身.w1 * x
        返回y

# 这工作正常
x = [x 表示 x 在范围 (-3, 3) 内]
f = 拉姆达 x: 5 * x - 7
y = [f(x_val) for x_val in x]

模型 = 线性回归(x, y)
模型.fit(num_iterations=3000)

model.show_coeffiecients() #输出：w0：-6.99999999999994 w1：5.00000000000002

#虽然这不是
x = [x for x in range(-50, 50)] # 增加 x 值的数量
f = 拉姆达 x: 5 * x - 7
y = [f(x_val) for x_val in x]

模型 = 线性回归(x, y)
模型.fit(num_iterations=3000)

model.show_coefficients()

最后一行产生警告：
运行时警告：乘法中遇到溢出
w1_hat = sum((self.y_向量 - 预测) * self.x_向量)
公式 = lambda x: self.w0 + self.w1 * x
]]></description>
      <guid>https://stackoverflow.com/questions/78115138/gradient-descent-weights-keep-getting-larger</guid>
      <pubDate>Wed, 06 Mar 2024 14:22:16 GMT</pubDate>
    </item>
    <item>
      <title>边际对数似然 GPytorch - 最小化的初始条件</title>
      <link>https://stackoverflow.com/questions/78031211/marginal-log-likelihood-gpytorch-initial-condition-for-minimization</link>
      <description><![CDATA[这个问题是针对高斯过程训练的情况提出的，但我想它也适用于神经网络。
# 找到最优模型超参数
模型.train()
可能性.train()

# 使用 adam 优化器
Optimizer = torch.optim.Adam(model.parameters(), lr=0.1) # 包含高斯似然参数

#“损失”对于 GP - 边际对数似然
mll = gpytorch.mlls.ExactMarginalLogLikelihood（可能性，模型）

对于范围内的 i（训练迭代）：
    优化器.zero_grad()
    输出=模型（train_x）
    损失 = -mll(输出, train_y)
    loss.backward()
    print(&#39;Iter %d/%d - 损失: %.3f&#39; % (i + 1,training_iterations,loss.item()))
    优化器.step()

在典型的训练过程中，我们试图最小化损失函数（在本例中为边际对数似然）。我的问题是，最小化的初始条件是什么？如何将其输入/输出到训练循环？
我只是想从数学角度理解训练阶段，发现 Pytorch “以一种无形的方式”做了很多事情。]]></description>
      <guid>https://stackoverflow.com/questions/78031211/marginal-log-likelihood-gpytorch-initial-condition-for-minimization</guid>
      <pubDate>Wed, 21 Feb 2024 02:05:44 GMT</pubDate>
    </item>
    <item>
      <title>如何在 mlx 中进行蒙版填充？</title>
      <link>https://stackoverflow.com/questions/77963476/how-do-i-do-masked-fill-in-mlx</link>
      <description><![CDATA[我想在 mlx 中实现 masked_fill，但它与 float(&#39;-inf&#39;) 配合效果不佳
https://pytorch.org/docs/stable/generate /torch.Tensor.masked_fill.html
我正在尝试使用 mlx.core.where 来实现此目的
masked_tensor = mlx.core.where(mask, mlx.core.array(float(&#39;-inf&#39;)), mlx.core.array(0))

但是对于面具
数组([[假，假，真，真]，
       [假，假，真，真]，
       [假，假，真，真]，
       [假，假，真，真]]，dtype = bool）

这会返回
数组([[nan, nan, -inf, -inf],
       [南，南，-inf，-inf]，
       [南，南，-inf，-inf]，
       [南，南，-inf，-inf]]，dtype = float32）

这不是我想要的。理想情况下它会返回
数组([[0, 0, -inf, -inf],
       [0, 0, -inf, -inf],
       [0, 0, -inf, -inf],
       [0, 0, -inf, -inf]], dtype=float32)

帮助]]></description>
      <guid>https://stackoverflow.com/questions/77963476/how-do-i-do-masked-fill-in-mlx</guid>
      <pubDate>Thu, 08 Feb 2024 16:55:27 GMT</pubDate>
    </item>
    <item>
      <title>Python - 从 OLS 模型中获取排列重要性</title>
      <link>https://stackoverflow.com/questions/70623835/python-grabbing-permutation-importance-from-ols-model</link>
      <description><![CDATA[正如标题所述，我正在尝试获取 OLS 模型中特征的排列重要性，但得到的是：
TypeError：估计器应该是实现“fit”方法的估计器，已通过
这是我的代码：
导入 pandas 作为 pd
从 sklearn.inspection 导入 permutation_importance
从 sklearn.model_selection 导入 train_test_split
将 statsmodels.api 导入为 sm

df = pd.read_csv(r&#39;my_file&#39;)

X = df.drop（我的因变量）
y = df[我的因变量）

X_train, X_test, y_train, y_test = train_test_split(X, y)

模型 - sm.OLS(y_train, X_train).fit()
打印（模型.摘要（））

分数 = permuation_importance(模型, X_train, y_train, 评分=&#39;neg_root_mean_squared_error&#39;)

重要性 = 分数.importances_mean

对于枚举中的 i,v（重要性）：
   print(&#39;特征：%0d，得分：%.5f&#39; % (i,v))

我有一种感觉，因为我使用的模型不是来自 sklearn，所以想知道是否有办法从 OLS 模型中获取特征指标？谢谢！！]]></description>
      <guid>https://stackoverflow.com/questions/70623835/python-grabbing-permutation-importance-from-ols-model</guid>
      <pubDate>Fri, 07 Jan 2022 15:51:40 GMT</pubDate>
    </item>
    </channel>
</rss>