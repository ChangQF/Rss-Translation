<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>标记为机器学习的活跃问题 - 堆栈内存溢出</title>
    <link>https://stackoverflow.com/questions/tagged/?tagnames=machine-learning&sort=active</link>
    <description>来自 stackoverflow.com 的最新 30 条</description>
    <lastBuildDate>Thu, 19 Dec 2024 15:18:10 GMT</lastBuildDate>
    <item>
      <title>关于将建议系统复杂性作为毕业设计的咨询 [关闭]</title>
      <link>https://stackoverflow.com/questions/79294470/consultion-about-a-recommendations-system-complexity-as-a-graduation-project</link>
      <description><![CDATA[我和我的两个项目伙伴正在做一个推荐系统作为毕业项目，我们想做一个混合系统，包括基于内容的、协作的和人口统计的推荐模块，同时利用强化学习来跟上新用户的数据
因为我们都没有经验，所以我们想向专业社区寻求建议
我们开始对数据进行预处理，但担心在 2 月 12 日截止日期之前是否能够真正实现所有内容，以及在开始训练模块之前我们应该了解的集成限制，这样我们就不必在完成一个模块后从头开始，因为如果我们要使用混合系统，我们应该做一些不同的事情
所以我想要关于如何做到这一点的建议，以及这一切是否能在截止日期之前完成，因为如果太多了，我们可以缩小规模，因为我们最初的计划只是一个基于内容的推荐系统，我们想知道我们的项目是否在我们的时间限制内可行]]></description>
      <guid>https://stackoverflow.com/questions/79294470/consultion-about-a-recommendations-system-complexity-as-a-graduation-project</guid>
      <pubDate>Thu, 19 Dec 2024 13:36:56 GMT</pubDate>
    </item>
    <item>
      <title>需要为 3 个不同的任务构建一个神经网络模型</title>
      <link>https://stackoverflow.com/questions/79294175/need-to-build-a-single-neural-network-model-for-3-different-tasks</link>
      <description><![CDATA[我有一个二元分类任务，需要对 3 个不同的数据集执行此任务。每个数据集具有不同的特征类型和特征数量，但它们都来自同一域。但是，这三个任务都具有相同的二元分类目标。我需要为这三个任务构建一个神经网络模型。
我不想删除任何数据集中的任何特征。是否有任何方法可以将所有特征投射到相同的潜在阶段，从而损失最少的信息，并且神经网络无论如何都会调整以在所有 3 个数据集上进行学习！
到目前为止，我还没有尝试任何方法，但我计划使用自动编码器将所有特征缩小到共享子空间，然后训练神经网络算法。]]></description>
      <guid>https://stackoverflow.com/questions/79294175/need-to-build-a-single-neural-network-model-for-3-different-tasks</guid>
      <pubDate>Thu, 19 Dec 2024 11:53:12 GMT</pubDate>
    </item>
    <item>
      <title>提取 LLaVa 转换器中的 hidden_​​states</title>
      <link>https://stackoverflow.com/questions/79294056/extracting-hidden-states-in-llavas-transformer</link>
      <description><![CDATA[我需要使用LLaVa来获取图像的嵌入+已提供给LLM的查询。
据我所知，我需要LLaVa模型在经过编码层之前的输出。
从StackOverflow上的这篇文章，我尝试使用pre-hook来保存每个层的输入：
def capture_hidden_​​states(module, module_input):
print(f&#39;module_input: {module_input}\n&#39;)

model_path = &quot;liuhaotian/llava-v1.6-vicuna-7b&quot;
model_name = get_model_name_from_path(model_path)

tokenizer, model, image_processor, context_len = load_pretrained_model(
model_path = model_path,
model_base = None,
model_name = model_name,
load_4bit = True, # 保存 GPU 内存
device = &quot;cuda:0&quot; # 默认
)
model.register_forward_pre_hook(capture_hidden_​​states)

但我的输出显示每个级别的输入都是空的：
module_input: ()

我看到 Hugging Face 的版本在 forward 方法中有一个 output_hidden_​​states 参数，但我目前无法让这个版本的 LLaVa 运行，所以我试图让它在我之前编写的代码上运行。
任何帮助非常感谢。]]></description>
      <guid>https://stackoverflow.com/questions/79294056/extracting-hidden-states-in-llavas-transformer</guid>
      <pubDate>Thu, 19 Dec 2024 11:11:59 GMT</pubDate>
    </item>
    <item>
      <title>如何将 PIL 图像转换为 pytorch 张量以供 py-feat 使用</title>
      <link>https://stackoverflow.com/questions/79294004/how-to-convert-a-pil-image-to-a-pytorch-tensor-for-py-feat</link>
      <description><![CDATA[我需要将 pil 图像转换为 pytorch 张量，以便在 Detector.detect() (py-feat) 中使用它，但我在调用 detect() 的行中收到此错误：

RuntimeError：给定 groups=1，权重大小为 [64, 3, 3, 3]，预期
input[1, 1, 112, 112] 有 3 个通道，但得到的是 1 个通道

但是，如果我在转换后使用 check_tensor() 检查张量的样子，它看起来很好
这是代码：
def check_tensor(self, frame_tensor):
frame_numpy = frame_tensor.squeeze(0).permute(1, 2, 0).byte().numpy()
frame_numpy_bgr = cv2.cvtColor(frame_numpy, cv2.COLOR_RGB2BGR) 
cv2.imshow(&quot;Frame&quot;, frame_numpy_bgr)
cv2.waitKey(0) 
cv2.destroyAllWindows()

def analyze_image(self, image_path):

img = Image.open(image_path)
tensor_image = F.pil_to_tensor(img)
orig_prediction = self.detector.detect(inputs=tensor_image, data_type=&quot;tensor&quot;)

我该如何解决这个问题？]]></description>
      <guid>https://stackoverflow.com/questions/79294004/how-to-convert-a-pil-image-to-a-pytorch-tensor-for-py-feat</guid>
      <pubDate>Thu, 19 Dec 2024 10:53:19 GMT</pubDate>
    </item>
    <item>
      <title>ESP32 S3 MINI 1 上的 TinyML 部署问题</title>
      <link>https://stackoverflow.com/questions/79293436/tinyml-deployment-issue-on-esp32-s3-mini-1</link>
      <description><![CDATA[我正在开展一个项目，使用 TinyML 根据 6 轴加速度计和陀螺仪数据预测马的活动。数据通过 ESP32-S3 收集，我正尝试在 ESP32-S3 上部署 TensorFlow Lite (TFLite) 模型以进行实时预测。
但是，我遇到了几个库兼容性和部署问题。尽管遵循了标准的 TinyML 部署实践，但模型与 ESP32-S3 的集成似乎存在问题，尤其是在处理 TFLite Micro 运行时时。我尝试了一些优化，但仍然无法顺利运行。
我很感激任何有关的建议：
如何在 ESP32-S3 上有效地部署 TinyML 模型。
可能更适合此用例的替代方法或工具。
任何提示、文档或类似设置的经验都会有很大帮助！
提前感谢！]]></description>
      <guid>https://stackoverflow.com/questions/79293436/tinyml-deployment-issue-on-esp32-s3-mini-1</guid>
      <pubDate>Thu, 19 Dec 2024 07:39:46 GMT</pubDate>
    </item>
    <item>
      <title>无论如何，PyTorch DeiT 模型都会持续预测一个类别</title>
      <link>https://stackoverflow.com/questions/79293139/pytorch-deit-model-keeps-predicting-one-class-no-matter-what</link>
      <description><![CDATA[]]></description>
      <guid>https://stackoverflow.com/questions/79293139/pytorch-deit-model-keeps-predicting-one-class-no-matter-what</guid>
      <pubDate>Thu, 19 Dec 2024 04:52:07 GMT</pubDate>
    </item>
    <item>
      <title>如何使用神经网络为二元分类器绘制平滑的决策边界？</title>
      <link>https://stackoverflow.com/questions/79292743/how-to-plot-a-smooth-decision-boundary-for-a-binary-classifier-using-a-neural-ne</link>
      <description><![CDATA[我正在尝试实现一个简单的神经网络来对圆形数据集进行分类并绘制一个平滑的决策边界。但是，我的决策边界不平滑或不正确。我希望它看起来像此示例中显示的边界：
像这样 
当我运行代码时，决策边界是锯齿状的，或者与我的数据集的形状不匹配。我希望内部类周围有一条平滑的曲线。
这是我的代码：
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import make_circles

# 生成数据集
X, y = make_circles(n_samples=100, noise=0.1, factor=0.3, random_state=0)
X = X.T # 转置 X
y = y.reshape((1, y.shape[0])) # 将 y 重塑为行向量

# 数据集可视化
plt.scatter(X[0, :], X[1, :], c=y.flatten())
plt.title(&#39;Dataset&#39;)
plt.xlabel(&#39;Feature 1&#39;)
plt.ylabel(&#39;Feature 2&#39;)
plt.show()

def paramètres(n0=2, n1=2, n2=1):
W1 = np.random.randn(n1, n0)
b1 = np.zeros((n1, 1))
W2 = np.random.randn(n2, n1)
b2 = np.zeros((n2, 1))
参数 = {
&#39;W1&#39;: W1,
&#39;b1&#39;: b1,
&#39;W2&#39;: W2,
&#39;b2&#39;: b2
}
返回参数

def G(X, theta, b):
Z = theta.dot(X) + b
返回 Z, 1/(1+np.exp(-Z))

def forwardPropagation(X, 参数):
W1 = 参数[&#39;W1&#39;]
b1 = 参数[&#39;b1&#39;]
W2 = 参数[&#39;W2&#39;]
b2 =参数[&#39;b2&#39;]

Z1, A1 = G(X, W1, b1)
Z2, A2 = G(A1, W2, b2) 

激活 = {
&#39;A1&#39;: A1,
&#39;A2&#39;: A2
}
返回激活

def backPropagation(X, y, 参数, 激活):
A1 = 激活[&#39;A1&#39;]
A2 = 激活[&#39;A2&#39;]
W2 = 参数[&#39;W2&#39;]

m = y.shape[1]

dZ2 = A2 - y
dW2 = 1 / m * dZ2.dot(A1.T)
db2 = 1 / m * np.sum(dZ2, axis=1, keepdims=True)

dZ1 = np.dot(W2.T, dZ2) * A1 * (1 - A1)
dW1 = 1 / m * dZ1.dot(X.T)
db1 = 1 / m * np.sum(dZ1, axis=1, keepdims=True)

gradients = {
&#39;dW1&#39;: dW1,
&#39;db1&#39;: db1,
&#39;dW2&#39;: dW2,
&#39;db2&#39;: db2
}

return gradients

def update(gradients, parametres, learning_rate):
W1 = parametres[&#39;W1&#39;]
b1 = parametres[&#39;b1&#39;]
W2 = parametres[&#39;W2&#39;]
b2 = parametres[&#39;b2&#39;]

dW1 = gradients[&#39;dW1&#39;]
db1 = gradients[&#39;db1&#39;]
dW2 = gradients[&#39;dW2&#39;]
db2 = gradients[&#39;db2&#39;]

W1 = W1 - 学习率 * dW1
b1 = b1 - 学习率 * db1
W2 = W2 - 学习率 * dW2
b2 = b2 - 学习率 * db2

参数 = {
&#39;W1&#39;: W1,
&#39;b1&#39;: b1,
&#39;W2&#39;: W2,
&#39;b2&#39;: b2
}

返回参数

def predict(X, 参数):
激活 = forwardPropagation(X, 参数)
返回激活[&#39;A2&#39;]

def neuro_network(X, y, n1=2, learning_rate=0.1, n_iter=1000):
n0 = X.shape[0] 
n2 = y.shape[0] 
np.random.seed(0)
参数 = paramètres(n0, n1, n2)

for i in range(n_iter):
activations = forwardPropagation(X, parametres)
gradients = backPropagation(X, y, parametres,activations)
parametres = update(gradients, parametres, learning_rate)

return parametres,activations

# 训练模型
parametres,activations = neuro_network(X, y, n1=2, learning_rate=0.1, n_iter=1000)

# 绘制决策边界
x_min, x_max = X[0, :].min() - 1, X[0, :].max() + 1
y_min, y_max = X[1, :].min() - 1, X[1, :].max() + 1
xx, yy = np.meshgrid(np.arange(x_min, x_max, 0.02),
np.arange(y_min, y_max, 0.02))

Z = predict(np.c_[xx.ravel(), yy.ravel()].T, parametres)

Z = Z.reshape(xx.shape)

plt.figure()
plt.contourf(xx, yy, Z, levels=[0, 0.5, 1], alpha=0.8, cmap=plt.cm.RdYlBu)
plt.scatter(X[0, :], X[1, :], c=y.flatten(), cmap=plt.cm.RdYlBu)
plt.title(&#39;决策边界&#39;)
plt.xlabel(&#39;特征 1&#39;)
plt.ylabel(&#39;特征 2&#39;)
plt.show()
]]></description>
      <guid>https://stackoverflow.com/questions/79292743/how-to-plot-a-smooth-decision-boundary-for-a-binary-classifier-using-a-neural-ne</guid>
      <pubDate>Wed, 18 Dec 2024 23:11:54 GMT</pubDate>
    </item>
    <item>
      <title>Keras 模型：调试维度后输入形状不匹配问题</title>
      <link>https://stackoverflow.com/questions/79292676/keras-model-input-shape-mismatch-issue-after-debugging-dimensions</link>
      <description><![CDATA[]]></description>
      <guid>https://stackoverflow.com/questions/79292676/keras-model-input-shape-mismatch-issue-after-debugging-dimensions</guid>
      <pubDate>Wed, 18 Dec 2024 22:34:35 GMT</pubDate>
    </item>
    <item>
      <title>如何以与“https://www.tensorflow.org/tfmodels/vision/object_detection”中类似的方式修改配置文件？</title>
      <link>https://stackoverflow.com/questions/79292447/how-can-i-modify-the-config-file-in-a-similar-way-used-in-https-www-tensorflo</link>
      <description><![CDATA[我是这个领域的新手，我正在寻找有关如何修改现有脚本以使用 EfficientDet D1 模型的指导。我按照教程操作，并使用默认脚本成功训练了一个自定义数据集。该脚本使用以下行来配置模型：
exp_config = exp_factory.get_exp_config(&#39;retinanet_resnetfpn_coco&#39;)

这对于默认的 RetinaNet 模型来说很好。但是，我想改用 EfficientDet D1 模型。我已经下载了 EfficientDet D1 配置文件，但不确定如何在脚本中引用它。
我尝试过的方法

检查了配置文件：我检查了 EfficientDet D1 配置文件中的参数，看它是否有任何明确的引用名称，可以与 exp_factory.get_exp_config() 一起使用。
检查了替代配置方法：我寻找了加载自定义模型配置的其他方法，但找不到任何明确的说明。

我正在寻找什么

如何修改 exp_factory.get_exp_config() 行以引用 EfficientDet D1 配置文件？
如果这种方法不可行，如何手动加载和引用配置文件？
配置文件本身是否需要进行任何特定更改才能使其工作？

如果需要，我愿意手动修改配置文件参数。并尝试通过此方法运行训练
!python model_main_tf2.py \
--model_dir=/content/trainingdemo/models/my_efficientDet_d0 \
--pipeline_config_path=/content/trainingdemo/models/my_efficientDet_d0/pipeline.config

&quot;但结果是`
2024-12-18 23:14:43.163543: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] 无法注册 cuFFT 工厂：尝试注册插件 cuFFT 工厂，但已注册一个
警告：调用 absl::InitializeLog() 之前的所有日志消息都写入 STDERR
E0000 00:00:1734563683.182126 16153 cuda_dnn.cc:8310] 无法注册 cuDNN 工厂：尝试注册插件 cuDNN 工厂，但已注册一个
E0000 00:00:1734563683.187813 16153 cuda_blas.cc:1418] 无法注册 cuBLAS 工厂：尝试注册插件 cuBLAS 的工厂，但已注册一个工厂
回溯（最近一次调用）：
文件 &quot;/content/trainingdemo/model_main_tf2.py&quot;，第 32 行，位于 &lt;module&gt;
来自 object_detection 导入 model_lib_v2
文件 &quot;/usr/local/lib/python3.10/dist-packages/object_detection/model_lib_v2.py&quot;，第 29 行，位于 &lt;module&gt;
来自 object_detection 导入 eval_util
文件 &quot;/usr/local/lib/python3.10/dist-packages/object_detection/eval_util.py&quot;，第 35 行，位于 &lt;module&gt;
从 object_detection.metrics 导入 coco_evaluation
文件 &quot;/usr/local/lib/python3.10/dist-packages/object_detection/metrics/coco_evaluation.py&quot;，第 28 行，位于 &lt;module&gt;
从 object_detection.utils 导入 o​​bject_detection_evaluation
文件 &quot;/usr/local/lib/python3.10/dist-packages/object_detection/utils/object_detection_evaluation.py&quot;，第 46 行，位于 &lt;module&gt;
从 object_detection.utils 导入 label_map_util
文件 &quot;/usr/local/lib/python3.10/dist-packages/object_detection/utils/label_map_util.py&quot;，第 29 行，位于 &lt;module&gt;
从 object_detection.protos 导入 string_int_label_map_pb2
文件 &quot;/usr/local/lib/python3.10/dist-packages/object_detection/protos/string_int_label_map_pb2.py&quot;，第 33 行，位于 &lt;module&gt;
_descriptor.EnumValueDescriptor(
文件 &quot;/usr/local/lib/python3.10/dist-packages/google/protobuf/descriptor.py&quot;，第 789 行，位于 __new__
_message.Message._CheckCalledFromGeneratedFile()
TypeError：无法直接创建描述符。
如果此调用来自 _pb2.py 文件，则您生成的代码已过时，必须使用 protoc &gt;= 3.19.0 重新生成。
如果您无法立即重新生成您的原型，其他一些可能的解决方法是：
1. 将 protobuf 包降级到 3.20.x 或更低版本。
2. 设置 PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python（但这将使用纯 Python 解析，速度会慢得多）。

`
任何指导或代码示例将不胜感激。提前致谢！]]></description>
      <guid>https://stackoverflow.com/questions/79292447/how-can-i-modify-the-config-file-in-a-similar-way-used-in-https-www-tensorflo</guid>
      <pubDate>Wed, 18 Dec 2024 20:49:15 GMT</pubDate>
    </item>
    <item>
      <title>“使用 YOLO 和 EasyOCR 进行车牌识别时遇到的文本识别问题” [关闭]</title>
      <link>https://stackoverflow.com/questions/79291987/text-recognition-issues-in-license-plate-recognition-using-yolo-and-easyocr</link>
      <description><![CDATA[问题
我正在开发一个车牌识别系统，使用 YOLOv8 进行检测，使用 EasyOCR 进行文本识别。虽然 YOLO 可以正确检测车牌区域，但 OCR 结果对于阿拉伯语文本和数字通常不准确。
检测到的文本示例：
检测到：“اباز”，这是无关紧要的。
检测到：“الراق”，与“العراق”部分匹配。
像“٢٦٠٤٩٩”这样的数字被准确检测到。
我尝试过的
管道设置：
YOLOv8 检测车牌并提取其边界框。
EasyOCR 处理裁剪后的车牌以进行文本识别。
文本校正：
使用 difflib.get_close_matches() 将 OCR 检测到的文本与预定义单词进行匹配（例如，“العراق”、“دهوك”）。
应用置信度阈值来过滤低置信度结果。
图像预处理：
将车牌区域转换为灰度。
调整区域大小以增强 OCR 性能。
最小可重现示例
import cv2
import easyocr
from ultralytics import YOLO

def detect_plate_with_yolo(image_path, model_path=&quot;yolov8n.pt&quot;):
model = YOLO(model_path)
img = cv2.imread(image_path)
results = model(img)
detections = results[0].boxes.xyxy.cpu().numpy()
if detections:
x1, y1, x2, y2 = map(int, detections[0])
return img[y1:y2, x1:x2]
return None

def perform_ocr_on_plate(plate_img):
reader = easyocr.Reader([&#39;ar&#39;, &#39;en&#39;], gpu=False)
plate_gray = cv2.cvtColor(plate_img, cv2.COLOR_BGR2GRAY)
return reader.readtext(plate_gray, detail=1)

plate_img = detect_plate_with_yolo(&quot;path/to/image.jpg&quot;)
if plate_img is not None:
detected_text = perform_ocr_on_plate(plate_img)
print(detected_text)

预期与实际行为
预期：正确识别阿拉伯语文本和数字（例如，&quot;العراق&quot;）。
实际：部分匹配（例如，&quot;الراق&quot;）或不相关的结果（例如，&quot;اباز&quot;）。
问题
如何使用 EasyOCR 提高阿拉伯语车牌的 OCR 准确率？
有没有比 difflib.get_close_matches() 更好的文本校正替代方案？
哪些额外的预处理步骤可能有助于提高 OCR 性能？]]></description>
      <guid>https://stackoverflow.com/questions/79291987/text-recognition-issues-in-license-plate-recognition-using-yolo-and-easyocr</guid>
      <pubDate>Wed, 18 Dec 2024 17:26:40 GMT</pubDate>
    </item>
    <item>
      <title>Yolov5 模型捕获除预期或期望对象之外的其他对象[关闭]</title>
      <link>https://stackoverflow.com/questions/79291357/yolov5-model-capturing-other-objects-other-than-the-intended-or-desired-object</link>
      <description><![CDATA[我有一个用于数据集的 YOLO V5 m 模型，用于检测特定产品，但在对不同情况和场景以及各种光照条件下的产品图片数据集进行训练后，在 50 个 epoch 和 Yolo v5 中等架构以及批处理大小为 16 的情况下，情况没有重复。
我注意到，该模型依赖于颜色特征，这意味着检测到的对象具有黄色及其阴影。我使用了 yolo github 克隆附带的 train.py。我应该怎么做才能解决这个问题？
用于训练的数据集（大约 450 张图片）在谷歌驱动器中。
需要检测的产品：


检测到的其他产品：
]]></description>
      <guid>https://stackoverflow.com/questions/79291357/yolov5-model-capturing-other-objects-other-than-the-intended-or-desired-object</guid>
      <pubDate>Wed, 18 Dec 2024 14:01:11 GMT</pubDate>
    </item>
    <item>
      <title>随机森林分类器的修改[关闭]</title>
      <link>https://stackoverflow.com/questions/79290974/modification-of-random-forest-classifier</link>
      <description><![CDATA[我正在尝试更改随机森林分类器的功能。虽然通常每次分割都会随机选择特征，但我希望每次分割时都评估一个特定特征。我知道这会影响性能，但我想尝试一下这在非常具体的用例中是否是个好主意。因此，调整的结果应为：用于分割的特征是随机选择的（像往常一样），但始终会考虑一个特定特征（例如索引 15）（不一定使用）。据我所知，没有允许我指定该功能的函数（如果有，请告诉我）。]]></description>
      <guid>https://stackoverflow.com/questions/79290974/modification-of-random-forest-classifier</guid>
      <pubDate>Wed, 18 Dec 2024 11:48:27 GMT</pubDate>
    </item>
    <item>
      <title>如何在 OpenAI API 中仅发送提示的动态部分以优化令牌使用？</title>
      <link>https://stackoverflow.com/questions/79290775/how-to-send-only-dynamic-part-of-a-prompt-in-openai-api-to-optimize-token-usage</link>
      <description><![CDATA[我正在处理一项任务，需要与 OpenAI API 交互以处理动态祈祷请求。我想解决的问题是优化令牌使用。
这是我目前的方法：
我有一个静态系统指令，它定义了助手的行为（例如，以同理心回应祈祷请求）。
用户的祈祷请求是动态的，每次都会发生变化。
我想在每个请求中只发送动态部分（祈祷请求），同时保持静态部分（系统指令）在每个请求中保持一致。
我的目标是减少令牌使用量，同时确保助手对用户的请求做出适当的响应。
我尝试在每个请求中将静态部分作为提示的一部分发送，但我正在寻找一种更有效的方法来只发送动态部分，同时仍保持上下文。有没有更好的方法可以通过 OpenAI API 实现这一点？
此外，我想跟踪令牌使用情况，以确保尽可能优化调用。
有人能建议一种有效的方法吗？]]></description>
      <guid>https://stackoverflow.com/questions/79290775/how-to-send-only-dynamic-part-of-a-prompt-in-openai-api-to-optimize-token-usage</guid>
      <pubDate>Wed, 18 Dec 2024 10:33:04 GMT</pubDate>
    </item>
    <item>
      <title>图像预处理步骤[关闭]</title>
      <link>https://stackoverflow.com/questions/79288818/image-preprocessing-steps</link>
      <description><![CDATA[我想知道 Keras 图像数据加载是否对图像数据集进行了完整的预处理，例如应用过滤器、规范化、标准化等，在该模块之后我们是否不需要进行更详细的预处理？如果答案是肯定的，那么有人可以告诉我正确和准确的预处理步骤吗？
代码如下。
malimg=tf.keras.utils.image_dataset_from_directory(
r&quot;C:\Users\PMYLS\Desktop\Malware Pycharm Project\malimg_paper_dataset_imgs&quot;,
labels=&quot;inferred&quot;,
label_mode=&quot;int&quot;,
class_names=None,
color_mode=&quot;rgb&quot;,
batch_size=64,
image_size=(256, 256),
shuffle=True,
seed=None,
validation_split=None,
subset=None,
interpolation=&quot;bilinear&quot;,
follow_links=False,
crop_to_aspect_ratio=False,
pad_to_aspect_ratio=False,
data_format=None,
verbose=True,
)
class_names = malimg.class_names # 获取类名
print(&quot;Classes:&quot;, class_names)
]]></description>
      <guid>https://stackoverflow.com/questions/79288818/image-preprocessing-steps</guid>
      <pubDate>Tue, 17 Dec 2024 17:17:21 GMT</pubDate>
    </item>
    <item>
      <title>Keras ValueError：从未调用过层顺序，因此没有定义的输出</title>
      <link>https://stackoverflow.com/questions/78722413/keras-valueerror-the-layer-sequential-has-never-been-called-and-thus-has-no-def</link>
      <description><![CDATA[我想将 Keras 的 Grad-CAM 与我自己的 CNN 模型一起使用。我已遵循此 https://keras.io/examples/vision/grad_cam/，其中的 make_gradcam_heatmap 函数也来自此。我对 CNN 还不熟悉，所以我可能忽略了一些显而易见的东西，但为什么它在我运行模型时无法识别呢？
这是我的代码：
import numpy as np
import os
import tensorflow as tf
import keras
from tensorflow.keras.models import load_model
import cv2
from tensorflow.keras.models import Model

os.environ[&quot;KERAS_BACKEND&quot;] = &quot;tensorflow&quot;

从 IPython.display 导入图像，显示
导入 matplotlib 作为 mpl
导入 matplotlib.pyplot 作为 plt

img_path = &#39;/Users/.../image_1.npy&#39;

model = load_model(&#39;/Users/.../particle_classifier_model.h5&#39;)

model_builder = keras.applications.xception.Xception
preprocess_input = keras.applications.xception.preprocess_input
decode_predictions = keras.applications.xception.decode_predictions

image = np.load(img_path)
img_size = image.shape # 应为形状为 (240, 146) 的数组

def make_gradcam_heatmap(img_array, model, last_conv_layer_name, pred_index=None):
# 首先，我们创建一个将输入图像映射到最后一个 conv 的激活的模型层以及输出预测
grad_model = keras.models.Model(
model.inputs, [model.get_layer(last_conv_layer_name).output, model.output]
)

# 然后，我们计算输入图像的顶部预测类的梯度
# 相对于最后一个卷积层的激活
with tf.GradientTape() as tape:
last_conv_layer_output, preds = grad_model(img_array)
if pred_index is None:
pred_index = tf.argmax(preds[0])
class_channel = preds[:, pred_index]

# 这是输出神经元的梯度（顶部预测或选择）
# 相对于最后一个卷积层的输出特征图
grads = tape.gradient(class_channel, last_conv_layer_output)

# 这是一个向量，其中每个条目都是梯度的平均强度
# 在特定特征图通道上
pooled_grads = tf.reduce_mean(grads, axis=(0, 1, 2))

# 我们将特征图数组中的每个通道乘以
# 相对于顶部预测类的“此通道的重要性”
# 然后将所有通道相加以获得热图类激活
last_conv_layer_output = last_conv_layer_output[0]
heatmap = last_conv_layer_output @pooled_grads[..., tf.newaxis]
heatmap = tf.squeeze(heatmap)

# 为了可视化目的，我们还将在 0 和 1 之间对热图进行标准化
heatmap = tf.maximum(heatmap, 0) / tf.math.reduce_max(heatmap)
return heatmap.numpy()

last_conv_layer_name = “max_pooling2d_4”

image = image.reshape(1, 240, 146, 1)
preds = model.predict(image)

model.layers[-1].activation = None

heatmap = make_gradcam_heatmap(image, model, last_conv_layer_name)
plt.matshow(heatmap)
plt.show()

我的数据是维度 (240, 146) 的 numpy 数组，CNN 将其作为输入。]]></description>
      <guid>https://stackoverflow.com/questions/78722413/keras-valueerror-the-layer-sequential-has-never-been-called-and-thus-has-no-def</guid>
      <pubDate>Mon, 08 Jul 2024 18:32:19 GMT</pubDate>
    </item>
    </channel>
</rss>