<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>学习机器学习</title>
    <link>https://www.reddit.com/r/learnmachinelearning/</link>
    <description>一个致力于学习机器学习的 subreddit</description>
    <lastBuildDate>Sun, 14 Jul 2024 15:22:11 GMT</lastBuildDate>
    <item>
      <title>图神经网络中的过度平滑</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e34lr6/oversmoothing_in_graph_neural_networks/</link>
      <description><![CDATA[      各位 reddit 用户好！我正在做一个项目，希望测量图嵌入的狄利克雷能量，以测量图中的过度平滑程度，这是它的公式： https://preview.redd.it/17pw3mtu2icd1.png?width=959&amp;format=png&amp;auto=webp&amp;s=70f404b57f7c2d2703f6a22e228763ab09a42bc2 但我不确定我是否理解正确，对吗？只是取一个特定的层并从每个其他节点中减去所有节点的嵌入并对其进行规范化？这个公式到底是怎么回事？测量它究竟如何有助于确定过度平滑？    提交人    /u/Ok-Archer6818   [link] [评论] ]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e34lr6/oversmoothing_in_graph_neural_networks/</guid>
      <pubDate>Sun, 14 Jul 2024 15:10:36 GMT</pubDate>
    </item>
    <item>
      <title>有没有什么方法可以加快网格搜索的速度？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e33bbf/is_there_any_way_to_speed_up_grid_search/</link>
      <description><![CDATA[大家好。我最近在用 Python 开发一个程序，该程序使用经典神经网络回归模型来预测股票价格。我正在使用 scikit-learn 中的参数网格来为我的模型寻找合适的超参数，但即使只为一只股票寻找合适的参数也需要很长时间。有什么方法可以加快这个过程或目测一些参数吗？我使用的是 Macbook M2 Pro 16，配备 16G RAM 和启用了 Apple Metal。目前时间还可以忍受，但将来我想通过该程序运行大约 20 只股票来构建投资组合。这是我正在使用的参数网格。  param_grid = { &#39;hidden_​​dim1&#39;: [25, 50, 100, 250,500], &#39;hidden_​​dim2&#39;: [50, 100, 200, 500,1000], &#39;epochs&#39;: [100,250, 500, 1000, 1500], &#39;lr&#39;: [0.01, 0.001, 0.0001] }     提交人    /u/Darth_Cassius   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e33bbf/is_there_any_way_to_speed_up_grid_search/</guid>
      <pubDate>Sun, 14 Jul 2024 14:14:34 GMT</pubDate>
    </item>
    <item>
      <title>我想设计推荐系统。你推荐什么课程？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e311hz/i_want_to_design_recommender_systems_what_course/</link>
      <description><![CDATA[明尼苏达大学 Coursera 有一个推荐专家课程。该课程评分为 4.4（共 700 条评论）。你们有人上过这个课程吗？    提交人    /u/appman1138   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e311hz/i_want_to_design_recommender_systems_what_course/</guid>
      <pubDate>Sun, 14 Jul 2024 12:24:23 GMT</pubDate>
    </item>
    <item>
      <title>什么是支持向量机？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e3113t/what_are_support_vector_machines/</link>
      <description><![CDATA[        提交人    /u/SoftwareDream   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e3113t/what_are_support_vector_machines/</guid>
      <pubDate>Sun, 14 Jul 2024 12:23:49 GMT</pubDate>
    </item>
    <item>
      <title>计算调整后的 r^2</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e30ozh/calculating_adjusted_r2/</link>
      <description><![CDATA[我有以下代码，我正在尝试计算调整后的 R^2。我可以计算 r^2，但不知道调整后的 r^2 的 n 和 p 值应该是多少。  p 是特征选择之前还是之后特征集中的列数，我如何获取它？ n 是训练数据还是测试数据中的行数？ 注意：我还没有确定调整后的 r^2 的 n 和 p，因为我不确定 这是我的代码： import numpy as np import pandas as pd from sklearn.ensemble import RandomForestRegressor from sklearn.model_selection import train_test_split target_data = pd.read_csv(&#39;Cleaned data.csv&#39;, sep=&#39;,&#39;).head(1000)[&#39;Standard Value&#39;] features = pd.read_csv(&#39;features.csv&#39;, sep=&#39;,&#39;).head(1000) training_features, testing_features, training_target, testing_target = \ train_test_split(features, target_data, random_state=42) exports_pipeline = RandomForestRegressor(bootstrap=True, max_features=0.7500000000000001, min_samples_leaf=11, min_samples_split=9, n_estimators=100) exports_pipeline.fit(training_features, training_target) results = exports_pipeline.predict(testing_features) r2 = exports_pipeline.score(testing_features, testing_target) adj_R2 = 1- ((1-r2) * (n-1)/(n-p-1)) #Adj R2 = 1-(1-R2)*(n-1)/(n-p-1) print(r2)     由   提交  /u/Legitimate_Trade_285   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e30ozh/calculating_adjusted_r2/</guid>
      <pubDate>Sun, 14 Jul 2024 12:05:00 GMT</pubDate>
    </item>
    <item>
      <title>Qualcomm AI Stack - 问题</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e305m6/qualcomm_ai_stack_question/</link>
      <description><![CDATA[我最近购买了一台新的 Copilot+ 电脑。我一直在研究 QUALCOMM 的新芯片及其软件支持。QUALCOMM 似乎在软件堆栈方面投入了大量资金，以加速新平台上 AI 功能的开发。我很惊讶我们没有看到类似于 Ollama 或 LM Studio 的平台。 我正在尝试了解有关利用 Copilot+ PC CPU/GPU/NPU 进行 AI 所需的系统级编程的更多信息。曲线有点陡峭，所以我需要投入一些时间。想知道是否有更有能力的软件工程师认真研究过该平台。架构是否存在阻碍开发的固有限制？关于加速学习平台有什么建议吗？    提交人    /u/kintotal   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e305m6/qualcomm_ai_stack_question/</guid>
      <pubDate>Sun, 14 Jul 2024 11:34:15 GMT</pubDate>
    </item>
    <item>
      <title>发现健康零食售卖选项 | 提升您的零食习惯 2024</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e2zmnw/discover_healthy_snack_vending_options_elevate/</link>
      <description><![CDATA[        由    /u/SuccessfulContact175   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e2zmnw/discover_healthy_snack_vending_options_elevate/</guid>
      <pubDate>Sun, 14 Jul 2024 11:02:23 GMT</pubDate>
    </item>
    <item>
      <title>麻省理工学院机器学习研究生教授机器学习和深度学习（免费）</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e2z1ap/mit_machine_learning_graduate_teaches_machine/</link>
      <description><![CDATA[      我相信任何人都可以转型到机器学习，只要他们决定这样做。 在过去的 3 个月里，我开始了一个教授机器学习和深度学习的项目。 我录制了 70 个机器学习和深度学习的视频。 每天，我都会编写脚本、录制和编辑 1 个视频，大约持续 6-7 个小时。结果是 2 个庞大的播放列表。 1️⃣ 机器学习边做边教播放列表： (a) 涵盖的主题：回归、分类、神经网络、卷积神经网络 (b) 讲座数量：35 (c) 讲座讲师：我（IIT Madras BTech、MIT AI PhD） (d) 播放列表链接：https://www.youtube.com/playlist?list=PLPTV0NXA_ZSi-nLQ4XV2Mds8Z7bihK68L 2️⃣ 从头开始​​的神经网络播放列表： (a) 涵盖的主题：神经网络架构、前向传递、后向传递、优化器。完全用 Python 从头开始​​编码。没有 Pytorch。没有 Tensorflow。只有 Numpy。 (b) 讲座数量：35 (c) 讲座讲师：我（IIT Madras BTech、MIT AI PhD） 播放列表链接：https://www.youtube.com/playlist?list=PLPTV0NXA_ZSj6tNyn_UadmUeU3Q3oR-hu 附注：讲师背景：我毕业于麻省理工学院，获得机器学习博士学位。视频详细展示了我的笔记。 https://i.redd.it/tjxybbqyngcd1.gif    submitted by    /u/OtherRaisin3426   [link] [评论] ]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e2z1ap/mit_machine_learning_graduate_teaches_machine/</guid>
      <pubDate>Sun, 14 Jul 2024 10:25:11 GMT</pubDate>
    </item>
    <item>
      <title>研究思路</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e2y0sr/research_idea/</link>
      <description><![CDATA[我想知道我是否计划创建一个类似 gpt 的模型，通过提供两件事（首先对他们所写的内容进行评级，然后给出建议）来帮助错误报告者编写重现错误的步骤，假设我有 1000 个示例，用于示例重现步骤应该如何。我使用哪种 NLP 或 nano gpt 类型的东西最适合这种用例？请给我一些想法    提交人    /u/Hackjag   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e2y0sr/research_idea/</guid>
      <pubDate>Sun, 14 Jul 2024 09:18:47 GMT</pubDate>
    </item>
    <item>
      <title>我计算输入层和隐藏层之间的权重的方式有什么错误？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e2xx7j/what_is_wrong_with_how_i_calculate_the_weights/</link>
      <description><![CDATA[我说这些权重有问题，因为当我注释掉更新这些权重的行时，NN 实现了约 80% 的准确率，但是当我保留它时，NN 会得到约 10% 的准确率，也就是随机的。  提前感谢任何帮助！ 这是代码： import numpy as np import pandas as pd class NeuralNetwork(): def __init__(self): self.trainData: np.array = np.array(pd.read_csv(&#39;mnist_train.csv&#39;)) self.testData: np.array = np.array(pd.read_csv(&#39;mnist_test.csv&#39;)) self.LR = 0.1 inputNeuronCount = 784 # 28 x 28 像素 hiddenNeuronCount = 64 outputNeuronCount = 10 # 0 -&gt; 9 # 权重和偏差用 -0.5 和 10 之间的随机值初始化0.5 self.weights：np.array = np.random.rand（inputNeuronCount，hiddenNeuronCount）-0.5 self.outputWeights：np.array = np.random.rand（hiddenNeuronCount，outputNeuronCount）-0.5 self.biases：list [np.array] = np.random.rand（hiddenNeuronCount）-0.5 self.outputBiases：list [np.array] = np.random.rand（outputNeuronCount）-0.5 def linearRegression（self，dataset）：lossValues = [] correctCount = 0 invalidCount = 0 for i，data in enumerate（dataset）：real：int = data [0] data：np.array = data [1：] / 255.0 prediction，outputLayer，activatedLayer，unactivatedLayer = self.forwardPass(data) if prediction == real: correctCount+=1 # print(f&quot;猜对了 ({prediction})，还不错！&quot;) else: invalidCount+=1 # print(f&quot;这东西肯定是坏的，pred 是 {prediction}，real 是 {real}，哈哈&quot;) loss, newWeights, newBiases, newOutputWeights, newOutputBiases = self.backPropagate(real, outputLayer, activatedLayer, unactivatedLayer, data) lossValues.append(loss) if i % 1000 == 0: print(f&quot;Loss 是 {loss}，accuracy 是 {round(correctCount/(correctCount+incorrectCount), 5)}&quot;) # self.weights = self.weights - (self.LR * newWeights.T) self.biases = self.biases - (self.LR * newBiases.T) self.outputWeights = self.outputWeights - (self.LR * newOutputWeights.T) self.outputBiases = self.outputBiases - (self.LR * newOutputBiases.T) def forwardPass(self, data): # print(f&quot;数据形状：{data.shape}\n权重形状：{self.weights.shape}&quot;) unactivated = data.dot(self.weights) #+ self.biases # 未激活的隐藏层 activated = self.ReLU(unactivated) # 激活的隐藏层 output = activated.dot(self.outputWeights) normalizedOutput = self.softmax(output) prediction = np.argmax(normalizedOutput) return prediction, normalizedOutput, activated, unactivated def ReLU(self, unactivatedLayer): return np.maximum(0, unactivatedLayer) def derivReLU(self, value): if value &gt;= 0: 返回 1 else: 返回 0 def getDerivReLUArray(self, layer): returnLayer = np.zeros_like(layer) for i, element in enumerate(layer): returnLayer[i] = element return returnLayer # 在 0 和 1 之间归一化的置信度值 def softmax(self, outputLayer): exp_values = np.exp(outputLayer - np.max(outputLayer)) # 防止溢出 return exp_values / np.sum(exp_values) def backPropagate(self, real, outputLayer, activatedLayer, unactivatedLayer, inputLayer): loss: int = self.getLoss(outputLayer[real]) oneHot: np.array = self.createOneHot(real) deltaOutput: np.array = outputLayer - oneHot activatedLayer = activatedLayer.reshape(1, -1) # 重塑为 (1, 64) newOutputWeights = deltaOutput.reshape(-1, 1) @ activatedLayer # 矩阵乘法，创建一个 (10, 64) 数组 newOutputBiases = deltaOutput derivReLUArray = self.getDerivReLUArray(unactivatedLayer) temp = newOutputWeights.T.dot(deltaOutput) deltaHidden = temp * derivReLUArray # 隐藏的误差项 inputLayer = inputLayer.reshape(1, -1) deltaHidden = deltaHidden.reshape(-1, 1) newWeights = deltaHidden @ inputLayer newBiases = deltaHidden return loss, newWeights, newBiases, newOutputWeights, newOutputBiases def createOneHot(self, real): oneHotList = np.zeros(10) oneHotList[real] = 1 return oneHotList def getLoss（self，realConfidenceValue）：如果 __name__ == &#39;__main__&#39;，则返回 -np.log（realConfidenceValue）：NN = NeuralNetwork（）NN.linearRegression（NN.trainData）    提交人    /u/SnazzySnail9   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e2xx7j/what_is_wrong_with_how_i_calculate_the_weights/</guid>
      <pubDate>Sun, 14 Jul 2024 09:11:58 GMT</pubDate>
    </item>
    <item>
      <title>研究机器学习统计和概率的最佳书籍</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e2xjlt/best_book_to_study_statistics_and_probability_for/</link>
      <description><![CDATA[与视频教程相比，我更喜欢通过书本学习数学。  我做了一些研究，找到了这些关于统计学和概率的书籍。 对于统计学：  Mario F. Triola 著《基础统计学》 Sheldon M. Ross 著《面向工程师和科学家的概率和统计学简介》（本书涵盖了这两个主题）  对于概率：  Dimitri P. Bertsekas、John N. Tsitsiklis 著《概率简介》 Sheldon M. Ross 著《概率入门课程》  在研究过程中，我还发现了《机器学习的数学》这本书，但我正在寻找更深入的数学理解，因为我的长期目标是进入研究行业。 您认为我提到的哪一本书最适合我？ 您还有其他书籍或资源吗？ 谢谢。    提交人    /u/Esmaeel_   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e2xjlt/best_book_to_study_statistics_and_probability_for/</guid>
      <pubDate>Sun, 14 Jul 2024 08:45:38 GMT</pubDate>
    </item>
    <item>
      <title>两个不同的逻辑回归模型都可以正确吗？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e2tuzk/can_two_different_logistic_regression_models_both/</link>
      <description><![CDATA[两个不同的逻辑回归模型（使用不同的变量，因此系数和 p 值略有不同）是否都正确？两个 p 值都具有统计显著性。这可能吗，还是一个模型自动无效？另外，我所说的“正确”是指，如果一个模型以 45% 的概率预测结果，而第二个模型以只有 40% 的概率预测完全相同的观察结果，是否有办法确定哪个模型具有“真实”概率……或者换句话说，哪一个是“正确的”？    提交人    /u/Traditional_Soil5753   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e2tuzk/can_two_different_logistic_regression_models_both/</guid>
      <pubDate>Sun, 14 Jul 2024 04:45:37 GMT</pubDate>
    </item>
    <item>
      <title>用于人工智能开发的 3D 联想思维网络提案</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e2tjge/proposal_for_a_3d_associative_mental_web_for_ai/</link>
      <description><![CDATA[      主题：用于 AI 开发的 3D 联想思维网络提案 我写这篇文章是为了分享一个可以显著增强 AI 开发和思维过程的概念。我的想法围绕着创建一个 3D 联想思维网络，通过以网络格式链接图像、想法和概念来模仿人类认知。 例如，在一个大的 3D 空间中，第一个图像将是链接到 3D 图元的 2D 几何图元。每个链接的图像都会有一个“让我想起”的关联，最终形成一个由 3D 对象、声音和可能的视频剪辑组成的庞大互连网络。 例如，球体可能会“让我想起”苹果，而苹果又会“让我想起”人类的大脑会从亚当的苹果开始，然后是亚当和夏娃的画作，然后是米开朗基罗这个词，接着是忍者神龟米开朗基罗的视频片段和其主题曲，最后是岩石上的乌龟的 3D 图像。节点会重叠，因为“苹果”可以有很多含义和联系。 人类以链接的图像思考，过渡到语音、声音和书面文字、字母和数字。在使用助记符时，我们会逆转这个过程，编码回 3D 图像或场景 - 将三个单词转换成首字母缩略词，将首字母缩略词转换成我们脑海中说出的短语，然后用代表首字母缩略词的符号可视化场景。 该模型可以改善人工智能处理信息的方式，从而推动各种应用的发展。我相信这个概念可以帮助开发一种更像人类思考和互动的人工智能。  潜在挑战：  实施复杂性：构建 3D 关联网络可能需要大量的计算资源和先进的算法。 数据输入需求：关联的准确映射将需要大量多样化的数据集进行训练。 类似人类的理解：确保人工智能以类似人类的方式浏览网络将需要持续的研究和改进。   Derek Van Derven    提交人    /u/ExpKey   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e2tjge/proposal_for_a_3d_associative_mental_web_for_ai/</guid>
      <pubDate>Sun, 14 Jul 2024 04:26:32 GMT</pubDate>
    </item>
    <item>
      <title>寻找合作伙伴合作开展高级研究项目</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1e2p92b/looking_for_partners_to_collaborate_on_advanced/</link>
      <description><![CDATA[大家好，有谁愿意加入研究团队吗？一年前，我获得了机器人工程硕士学位，目前担任人工智能专家，顺便说一下，我现在的工作主要是实现 API。这些条件让我感到陷入困境，没有进步的空间，所以我开始独立从事业余项目以跟上我的个人学习。因此，我正在寻找想要亲自动手并处理或多或少复杂模型和项目的队友。 仅供参考，我正在研究 GAN 模型、变分自动编码器、RAG 等通用人工智能项目，在实施解决方案之前深入研究理论。    提交人    /u/AcquaFisc   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1e2p92b/looking_for_partners_to_collaborate_on_advanced/</guid>
      <pubDate>Sun, 14 Jul 2024 00:32:07 GMT</pubDate>
    </item>
    <item>
      <title>机器学习相关的简历审查帖</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1d8odje/machinelearningrelated_resume_review_post/</link>
      <description><![CDATA[请礼貌地将任何关于简历审查的帖子重定向到这里 对于那些正在寻找简历审查的人，请先在 imgur.com 上发布它们，然后将链接作为评论发布，或者甚至先在 /r/resumes 或 r/EngineeringResumes 上发布，然后在此处交叉发布。     提交人    /u/techrat_reddit   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1d8odje/machinelearningrelated_resume_review_post/</guid>
      <pubDate>Wed, 05 Jun 2024 12:11:43 GMT</pubDate>
    </item>
    </channel>
</rss>