<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
  <channel>
    <title>学习机器学习</title>
    <link>https://www.reddit.com/r/learnmachinelearning/</link>
    <description>一个致力于学习机器学习的 subreddit</description>
    <lastBuildDate>Sat, 29 Jun 2024 01:03:24 GMT</lastBuildDate>
    <item>
      <title>使用 SHAP 库而不指定“真实”模型</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqz6ff/using_the_shap_library_without_specifying_a_true/</link>
      <description><![CDATA[我和我的团队对 SHAP 还很陌生，我们正在尝试运行一些测试，在这些测试中我们可以将 SHAP 应用于我们创建的一些合成数据。我们手头有一个回归任务，其中有 5 个数字独立变量和 1 个数字因变量。 我知道通常我们会执行类似下面的操作来获取线性回归的 SHAP 值。 X_train = data[[&#39;x1&#39;, &#39;x2&#39;, &#39;x3&#39;, &#39;x4&#39;, &#39;x5&#39;]] y_train = data[[&#39;y&#39;]] model = sklearn.linear_model.LinearRegression() model.fit(X_train, y_train) explainer = shap.LinearExplainer(model, X_train)  在上面的例子中，我在运行 SHAP 之前在我的数据上预定义了一个线性回归模型。但是，我的经理要求我“不要运行真实模型（我们有了解这些模型的好处），而是运行 SHAP 并让它尝试预测 y，使用 x1 到 x5 作为数据”。 有没有办法计算 SHAP 值而不指定指定模型，比如线性回归，而是只输入独立变量和因变量？    提交人    /u/opposity   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqz6ff/using_the_shap_library_without_specifying_a_true/</guid>
      <pubDate>Sat, 29 Jun 2024 00:58:36 GMT</pubDate>
    </item>
    <item>
      <title>在深度学习的哪些部分中，了解其背后的数学知识会为您解决实际生活中的商业问题带来实质性优势？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqyisy/in_which_parts_of_deep_learning_knowing_math/</link>
      <description><![CDATA[本主题与学术无关，而是与解决现实生活中的商业问题的优势有关。 例如，我可以调用 OpenAI API 并使用 LLM 模型来解决业务问题，而无需了解 LLM 的基本理论。我也可以对一些视觉和语音模型做同样的事情，并成功解决业务问题。 我可以通过使用非深度学习算法（如随机森林）成功解决业务问题，尽管我了解一些理论知识，但不知道随机森林如何工作的所有数学细节。 详细的数学知识，深度学习的哪一部分可以为解决业务问题带来实质性优势，而如果没有数学就无法获得类似的结果？    提交人    /u/Alex_df_300   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqyisy/in_which_parts_of_deep_learning_knowing_math/</guid>
      <pubDate>Sat, 29 Jun 2024 00:24:24 GMT</pubDate>
    </item>
    <item>
      <title>是否有一门优秀的深度学习课程，不需要数学先修课程，可以在课程中教授必要的数学知识？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqx4mr/is_there_a_good_deep_learning_course_without_math/</link>
      <description><![CDATA[我认为在深度学习的同时学习数学可能比先学数学再学深度学习更有趣。有没有不要求数学先修课程的优秀深度学习课程，在课程中教授必要的数学知识？    提交人    /u/Alex_df_300   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqx4mr/is_there_a_good_deep_learning_course_without_math/</guid>
      <pubDate>Fri, 28 Jun 2024 23:15:48 GMT</pubDate>
    </item>
    <item>
      <title>PyTorch 批处理</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqu66p/pytorch_batch_processing/</link>
      <description><![CDATA[我开始使用 PyTorch 进行批处理，我注意到有些计算对我来说似乎没有意义。具体来说，我只是在 XOR 数据集上训练一个简单的前馈模型，批处理大小为 4。如果我没记错的话，每个层的权重梯度应该在批处理维度上进行归一化，方法是累积每个输入的梯度并将总数除以批处理大小。然而，这与 PyTorch 不太一致。通过将转置的输入与中间梯度进行矩阵乘法并对其进行归一化来手动计算线性层的权重梯度后，我得到的结果是： [[0.029297274, 0.75734013, 0.7865825, 0.21391404, 0.25166035]]  与 PyTorch 计算的结果相比： [[-0.0161, 0.8665, 0.7855, 0.1474, 0.2340]]  尽管 PyTorch 的梯度没有意义，但该模型仍然比使用“数学上正确”权重梯度的模型学习得更好。有人可以解释一下如何计算权重梯度以产生这些不同的结果吗？为了便于理解，下面是我的 PyTorch 模型：  import torch import torch.nn as nn import torch.optim as optim import numpy as np # 定义模型 class FeedForwardModel(nn.Module): def __init__(self): super(FeedForwardModel, self).__init__() self.layer1 = nn.Linear(2, 5) self.relu = nn.ReLU() self.layer2 = nn.Linear(5, 1) print(self.layer1.weight) print(self.layer1.bias) print(self.layer2.weight) print(self.layer2.bias) def forward(self, x): x = self.layer1(x) # x = self.relu(x) print(&quot;Input Values: &quot;) print(x) x = self.layer2(x) return x # 损失函数 loss_function = nn.MSELoss() # 生成虚拟数据 np.random.seed(0) torch.manual_seed(0) input = torch.tensor([[[0, 0]], [[0, 1]], [[1, 0]], [[1, 1]]], dtype=torch.float32) target = torch.tensor([[[0]], [[1]], [[1]], [[0]]], dtype=torch.float32) # 用于打乱数据的函数 def shuffle_data(inputs, target): indices = torch.randperm(len(inputs)) return input[indices], target[indices] # 用于生成批次的函数 def generate_batches(inputs, target, batch_size): for i in range(0, len(inputs), batch_size): Yield input[i:i+batch_size], target[i:i+batch_size] # 初始化模型，优化器 model = FeedForwardModel() optimizer = optim.SGD(model.parameters(), lr=0.01) # 训练循环 num_epochs = 10 batch_size = 4 for epoch in range(num_epochs): # 打乱数据 shuffled_inputs, shuffled_targets = shuffle_data(inputs, target) total_loss = 0.0 for batch_inputs, batch_targets in generate_batches(inputs, target, batch_size): # 前向传递 output = model(batch_inputs) # 计算损失 loss = loss_function(outputs, batch_targets) total_loss += loss.item() # 计算相对于输出的损失梯度 loss_grads = torch.autograd.grad(loss, output, create_graph=True)[0] # 后向传递和优化 optimizer.zero_grad() loss.backward() optimizer.step() # 每 50 个 epoch 打印一次输出 if epoch % 1 == 0: with torch.no_grad(): for i in input: print(model(i)) print(f&quot;Epoch: {epoch} | Loss: {total_loss}&quot;) # 打印梯度 print(&quot;Gradients after epoch&quot;, epoch) for name, param in model.named_pa​​rameters(): if param.grad is not None: print(f&quot;{name}.grad: {param.grad}&quot;) print(&quot;Loss Grads&quot;) print(loss_grads) print(&quot;Training done&quot;)  任何帮助都值得赞赏。    submitted by    /u/powerchip15   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqu66p/pytorch_batch_processing/</guid>
      <pubDate>Fri, 28 Jun 2024 21:01:35 GMT</pubDate>
    </item>
    <item>
      <title>问题：您使用什么软件/库/技术来可视化您的结果？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqt01f/question_what_softwarelibrariestechniques_do_you/</link>
      <description><![CDATA[大家好， 我想知道人们可视化模型输出的最常见方式是什么。我也很好奇人们如何在训练过程中可视化模型的性能。 我知道有很多不同的解决方案。到目前为止，我发现使用 matplotlib 或将数据导出到文件并使用 powerBI 进行分析是成功的，但我想看看是否有一种在机器学习圈中常见的更独特的方法。 就上下文而言，虽然我目前只有具有简单输出的简单 CNN 和线性/逻辑回归模型，但我希望最终创建类似于 Yosh 的 trackmania 系列的可视化。看起来他在数据输出时实时记录/执行运行，这似乎相当密集和复杂。 https://youtu.be/kojH8a7BW04?si=vUICySwTU-rQWwCW 任何指点都将不胜感激。谢谢！    提交人    /u/DarkAffairs   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqt01f/question_what_softwarelibrariestechniques_do_you/</guid>
      <pubDate>Fri, 28 Jun 2024 20:10:24 GMT</pubDate>
    </item>
    <item>
      <title>学习在财务工作中应用人工智能/机器学习</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqsemz/learning_to_apply_aiml_in_finance_work/</link>
      <description><![CDATA[嗨。我从事金融工作，一直在探索在日常工作中使用 ML 和 AI 的方法。我已经完成了一些在线课程，但还没有准备好开始真正编码。但在日常工作中，我想探索如何应用 ML/AI 的想法。 有人可以告诉我一个网站吗？我可以在那里付费（按小时、按问题或按任务等）以获得建议/咨询，帮助我思考问题？我想探索的问题示例：  我想为 LLM（ChatGPT？）提供一组文档（我自己的 pdf 格式的研究报告），它可以“研究”这些文档，然后回答有关内容的问题。这些文档保存在我电脑的一个大目录中。 我做了很多分析 IPO 的工作。我使用的估值方法是查看可比较的已上市公司，汇总其估值指标（市盈率、EV/EBITDA 等），然后将这些指标应用于相关的 IPO 候选公司，以得出合理的初始估值。某种 k 均值方法是否有助于识别上市公司的组/子组以用作可比公司（“comps”）？我可以输入有关选定的潜在可比公司范围的各种数据（股本回报率、利润率、收入增长、收益增长、杠杆率等），然后使用 k 均值模型识别子组  感谢您的帮助。    提交人    /u/BaileyBros1234   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqsemz/learning_to_apply_aiml_in_finance_work/</guid>
      <pubDate>Fri, 28 Jun 2024 19:44:57 GMT</pubDate>
    </item>
    <item>
      <title>心电图重建/模型似乎过度拟合</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqs9zg/ecg_reconstruction_model_seems_to_be_overfitting/</link>
      <description><![CDATA[]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqs9zg/ecg_reconstruction_model_seems_to_be_overfitting/</guid>
      <pubDate>Fri, 28 Jun 2024 19:39:19 GMT</pubDate>
    </item>
    <item>
      <title>专注于模型快速开发和部署的课程/播放列表？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqpvd9/coursesplaylist_that_focuses_on_fast_development/</link>
      <description><![CDATA[嘿，我想问一下是否有任何课程或资源可以用来学习如何快速开发/训练或部署模型？ 我了解 Python 和 ML 基础知识。我查看了一些 lightning.ai 视频（10/10 推荐）但不久前我放弃了学习，我不想在从头开始的课程上浪费时间。我只想使用可用数据来训练和部署模型，想知道是否有任何课程专注于此。     提交人    /u/Successful-Ant7824   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqpvd9/coursesplaylist_that_focuses_on_fast_development/</guid>
      <pubDate>Fri, 28 Jun 2024 17:56:01 GMT</pubDate>
    </item>
    <item>
      <title>开发了一个免费平台，用于快速创建用于 gpt 微调的 jsonl 数据集并自定义 llm 调用函数</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqp0ph/developed_a_free_platform_to_quickly_create_jsonl/</link>
      <description><![CDATA[当我在从事其他一些项目时，我为自己创建了一个平台，用于快速创建用于 gpt 微调的 jsonl 数据集并自定义 llm 调用函数。我意识到它非常有用，所以我不妨发布该网站，以防它对你们有用。所有功能都是客户端的，因此您可以轻松检查我是否试图窃取您的数据集 :- )  当然完全免费！ https://finetune-gpt.vercel.app/    提交人    /u/Pleasant_Syllabub591   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqp0ph/developed_a_free_platform_to_quickly_create_jsonl/</guid>
      <pubDate>Fri, 28 Jun 2024 17:19:30 GMT</pubDate>
    </item>
    <item>
      <title>寻求有关 Cloud GPU 的初学者建议</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqoxvi/seeking_advice_about_cloud_gpu_for_a_beginner/</link>
      <description><![CDATA[大家好， 我一直想学习人工智能，但我的基本笔记本电脑没有 GPU，这阻碍了我。经济实惠的笔记本电脑和个人电脑对我来说并不是一个真正的选择，因为我不住在第一世界国家，而且我还没有准备好在不知道我是否会投入足够的时间学习人工智能的情况下对硬件进行大量投资。 我最近看到了云 GPU 资源的广告，费用约为每小时 1 美元或更低。这个选项看起来很棒，因为它让我不需要大量的前期投资就可以学习，而且提供了灵活性。但是，我担心隐藏费用和意外成本。考虑到我的情况，你会推荐哪家 GPU 云提供商？我正在寻找一个定价明确且最好有每月支出限额的产品，即使它稍微贵一点。 我也尝试过 Google Colab 的免费套餐，但我经常遇到诸如内核断开连接、验证码或 GPU 计算耗尽等问题。 编辑：我已经完成了基础知识。我使用了 sklearn 的经典机器学习方法，并尝试了多层感知器，以及一些迁移学习（使用预先训练的 CNN 并修改分类层）。下一步，我正在考虑构建和训练 CNN、RNN、Transformers、GAN 和其他生成模型（任何模态），方法是构建小规模模型或微调现有模型。    提交人    /u/masoudbuilds   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqoxvi/seeking_advice_about_cloud_gpu_for_a_beginner/</guid>
      <pubDate>Fri, 28 Jun 2024 17:16:15 GMT</pubDate>
    </item>
    <item>
      <title>Deepfake 检测器</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqmytt/deepfake_detector/</link>
      <description><![CDATA[      Deepfake Detector 是一个专为检测 AI 生成或操纵的图像。 https://github.com/mytechnotalent/deepfake-detector 代码    提交人    /u/Material_Opinion_321   [link] [评论] ]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqmytt/deepfake_detector/</guid>
      <pubDate>Fri, 28 Jun 2024 15:53:50 GMT</pubDate>
    </item>
    <item>
      <title>Andrej Karpathy 的“神经网络：从零到英雄”课程是否有数学要求，或者他在视频中解释了必要的数学？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqkj1j/does_andrej_karpathys_neural_networks_zero_to/</link>
      <description><![CDATA[我需要擅长数学才能理解 Andrej Karpathy 的“神经网络：从零到英雄”课程吗？或者也许所有必要的数学都在他的课程中解释过了？我只知道基本的代数，如果这足以开始他的课程，我会很感兴趣。    提交人    /u/Alex_df_300   [link] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqkj1j/does_andrej_karpathys_neural_networks_zero_to/</guid>
      <pubDate>Fri, 28 Jun 2024 14:09:40 GMT</pubDate>
    </item>
    <item>
      <title>[p] Python/Web FashionVision 学习 PyTorch</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqfo5n/p_pythonweb_fashionvision_for_learning_pytorch/</link>
      <description><![CDATA[        提交人    /u/phantagom   [链接] [评论] ]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqfo5n/p_pythonweb_fashionvision_for_learning_pytorch/</guid>
      <pubDate>Fri, 28 Jun 2024 09:35:29 GMT</pubDate>
    </item>
    <item>
      <title>我们是如何在 ARC-AGI 挑战赛中从 34% 突然提高到 50% 的？</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1dqe9wl/how_did_we_suddenly_reached_from_34_to_50_on/</link>
      <description><![CDATA[用于解决 ARC 的 GPT-4o 这个解决方案背后的主要思想非常简单。 使用 GPT-4o 生成大约 8,000 个尝试实现转换的 Python 程序，选择一个对所有示例都正确的程序（通常有 3 个示例），然后提交此函数应用于其他测试输入时产生的输出。将问题显示为图像和各种 ASCII 表示形式。 这种方法在精神上类似于 AlphaCode 中应用的方法，其中模型生成数百万个完成以尝试解决编程问题，然后对它们进行聚合以确定要提交的内容。  全文： https://medium.com/aiguys/llm-based-agi-50-on-the-arc-agi-273014247cf2  让我们看看 ARC-AGI细节。  向 GPT-4o 提供 ARC-AGI 问题，同时为问题中的每个网格提供图像表示和各种文本表示。文本表示包括显示哪些单元格被不同颜色的连接组件占据，并显示输入和输出之间的差异（在网格形状相同的情况下）。只将原始图像提供给 GPT-4o 根本行不通。 指导 GPT-4o 推理什么是转换，推理如何将转换实现为代码，然后最终在代码中实际实现转换。 使用几个精心手写的分步推理示例的少量提示，让 GPT-4o 能够有效地进行这种推理。生成的提示通常大约有 30k 个 token（包括图像）。   使用一对小样本提示：一个提示用于网格大小发生变化时（在任何示例中），另一个提示用于网格大小不变时。   从 GPT-4o 中抽取大量完成（每个问题约 5,000 个）。 为每个问题选取最有希望的 12 个完成，然后尝试通过向 GPT-4o 展示该程序在示例上的实际输出来修复每个问题，然后要求 GPT-4o 修改代码以使其正确。  他们在 12 个起始实现中总共抽样了约 3,000 个尝试修复每个问题的完成。  使用小样本提示进行逐步推理的修订。 显示实际输出和预期输出之间差异的文本表示。   最后，根据对正确示例的程序的多数投票，选择 3 个提交。 （如果我们没有 3 个不同的正确示例的程序提交，我们会应用一些启发式方法来选择提交）。   AIGuys 月度新闻简报： https://medium.com/aiguys/newsletter     提交人    /u/Difficult-Race-1188   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1dqe9wl/how_did_we_suddenly_reached_from_34_to_50_on/</guid>
      <pubDate>Fri, 28 Jun 2024 07:53:31 GMT</pubDate>
    </item>
    <item>
      <title>机器学习相关的简历审查帖</title>
      <link>https://www.reddit.com/r/learnmachinelearning/comments/1d8odje/machinelearningrelated_resume_review_post/</link>
      <description><![CDATA[请礼貌地将任何关于简历审查的帖子重定向到这里 对于那些正在寻找简历审查的人，请先在 imgur.com 上发布它们，然后将链接作为评论发布，或者甚至先在 /r/resumes 或 r/EngineeringResumes 上发布，然后在此处交叉发布。     提交人    /u/techrat_reddit   [链接] [评论]]]></description>
      <guid>https://www.reddit.com/r/learnmachinelearning/comments/1d8odje/machinelearningrelated_resume_review_post/</guid>
      <pubDate>Wed, 05 Jun 2024 12:11:43 GMT</pubDate>
    </item>
    </channel>
</rss>